      SUBROUTINE TIMEP(KFILDO,KFIL10,NFIRST,
     1                 ID,IDPARS,THRESH,JD,NDATE,
     2                 KFILRA,RACESS,NUMRA,
     3                 ICALL,CCALL,ICALLD,CCALLD,NAME,
     4                 NELEV,STALAT,STALON,
     5                 ITIMEZ,ISDATA,SDATA,SDATA1,DIR,ND1,NSTA,
     6                 NGRIDC,NGRID,ND11,NSLAB,IPACK,IWORK,DATA,ND5,
     7                 LSTORE,ND9,LITEMS,CORE,ND10,NBLOCK,NFETCH,
     8                 IS0,IS1,IS2,IS4,ND7,
     9                 FD1,FD2,FD3,FD4,FD5,FD6,FD7,
     A                 FDVERT,FDTIME,FDSINS,FDMS,ND2X3,
     B                 ISTAV,L3264B,L3264W,MISTOT,IER)
C 
C        FEBRUARY  1995   GLAHN   TDL   MOS-2000
C        AUGUST    1996   GLAHN   ADDED MISSS AND MISTOT 
C        NOVEMBER  1996   GLAHN   ADDED KFILRA, RACESS, NUMRA, ICALLD,
C                                 CCALLD
C        JUNE      1997   GLAHN   D COMPILE OPTION REMOVED
C        JANUARY   1998   GLAHN   ADDED SUBSTITUTE STATIONS IN CCALL( , )
C        MAY       1998   GLAHN   ADDED ITIMEZ( )
C        OCTOBER   1998   GLAHN   COMMENT CHANGE 
C        NOVEMBER  1998   GLAHN   CHANGED DIMENSIONS OF CCALLD( )
C                                 AND ICALLD( , ) FROM ND1 TO ND5
C        NOVEMBER  1998   GLAHN   ADDED VECTOR DATA CALCULATIONS
C        JANUARY   2003   WEISS   CHANGED ND5 TO ND2X3
C        FEBRUARY  2003   WEISS   ADDED NAME AND NGRID TO CALLS TO 
C                                 OPTN2.
C        MAY       2003   GLAHN   REMOVED IER=101 AND TEST THAT LED TO IT;
C                                 CHANGED ND2X3 TO ND5 IN SEVERAL PLACES;
C                                 REARRANGED DIMENSIONS
C        JUNE      2003   GLAHN   CHANGED POSITIONS OF NGRID AND NAME 
C                                 IN CALL
C        OCTOBER   2014   SDS/EFE MODIFIED TO HANDLE TIME INTERPOLATION
C                                 BETWEEN DIFFERENT GRIDS, ONLY IF THEY 
C                                 ARE DIFFERENT BEDIENTS OF A PARENT
C                                 GRID. ADDED CALL TO DENSRM TO HANDLE
C                                 SPATIAL INTERP OF COARSE GRID TO FINE
C                                 GRID (ASSUMING COARSE GRID IS AT A
C                                 LATER FORECAST PROJECTION AND FINE
C                                 FINE GRID).
C
C        PURPOSE 
C            TO COMPUTE TIME DIFFERENCE OR MEAN OF TWO FIELDS OF THE
C            SAME VARIABLE DEFINITION (JD(1) THE SAME) AND LEVEL (JD(2)
C            THE SAME).  THE RUN TIME AND PROJECTIONS ARE CONTROLED AS
C            INDICATED BELOW.  SINCE NO SPATIAL RELATIONSHIPS ARE REQUIRED,
C            COMPUTATIONS CAN BE DONE IN A LINEAR ARRAY.
C
C            THE PROCESSING INDICATORS (IDPARS(10)) 1 THROUGH 4 PERFORM
C            AS FOLLOWS, WHERE THE FIELDS ARE INDICATED AS (2) AND (1) AND
C            ARE DESIGNATED:
C                (1) = RUN TIME OFFSET, PROJECTION TAU + OH
C                (2) = RUN TIME OFFSET, PROJECTION TAU
C            1 = MEAN        ((2)+(1)/2.
C            2 = DIFFERENCE  ((1)-(2)  FOR A RUN OF THE SAME TIME, A 
C                                      POSITIVE DIFFERENCE MEANS THAT THE
C                                      VALUE HAS INCREASED WITH INCREASING
C                                      PROJECTION
C            3 = MAX((2),(1))
C            4 = MIN((2),(1))
C
C            THE PROCESSING INDICATORS (IDPARS(10)) 5 THROUGH 8 PERFORM
C            AS FOLLOWS, WHERE THE FIELDS ARE INDICATED AS (2) AND (1) AND
C            ARE DESIGNATED:
C                (1) = RUN TIME OFFSET,  PROJECTION TAU + OH
C                (2) = CURRENT RUN TIME, PROJECTION TAU
C            NOTE THAT WHEN OH = RR, THE TWO FIELDS VERIFY AT THE SAME TIME,
C            AND ARE FROM TWO DIFFERENT RUN TIMES.  THE RUN TIMES ARE SEPARATED
C            BY RR HOURS, WHERE RR NEED NOT BE THE CYCLE INCREMENT IN THE
C            MAIN PROGRAM.
C            5 = MEAN        ((2)+(1)/2.
C            6 = DIFFERENCE  ((2)-(1)  FOR TWO FIELDS VALID AT THE SAME TIME
C                                      (WHEN RR=OH), A POSITIVE DIFFERENCE
C                                      MEANS THAT THE CURRENT RUN VALUE
C                                      WAS THE HIGHER
C            7 = MAX((2),(1))
C            8 = MIN((2),(1))
C
C            SPECIAL ARRANGEMENTS MAY NEED TO BE MADE FOR PRECIP FIELDS.
C
C            WHEN IDPARS(10) NE 0 (I.E., THIS ROUTINE IS USED), THE PLAIN
C            LANGUAGE ID WILL HAVE HAD AN "LX" INSERTED INTO POSITONS
C            24 AND 25 BY RDPRED, WHERE "X" IS THE VALUE OF IDPARS(10).
C
C            NOTE THAT HH NE 0 CANNOT BE USED WITH OBSERVATIONS BECAUSE
C            THEY HAVE A TAU OF 0.
C
C        DATA SET USE 
C            KFILDO - DEFAULT UNIT NUMBER FOR OUTPUT (PRINT) FILE.  (OUTPUT) 
C            KFIL10 - UNIT NUMBER OF TDL MOS-2000 FILE SYSTEM ACCESS.
C                     (INPUT-OUTPUT) 
C 
C        VARIABLES 
C              KFILDO = DEFAULT UNIT NUMBER FOR OUTPUT (PRINT) FILE. (INPUT) 
C              KFIL10 = UNIT NUMBER OF TDL MOS-2000 FILE SYSTEM ACCESS.
C                       (INPUT)
C              NFIRST = 1 FOR THE 1ST DATE.
C               ID(J) = THE PREDICTOR ID (J=1,4).  (INPUT)
C           IDPARS(J) = THE PARSED, INDIVIDUAL COMPONENTS OF THE PREDICTOR
C                       ID CORRESPONDING TO ID( ) (J=1,15).
C                       (INPUT)
C                       J=1--CCC (CLASS OF VARIABLE),
C                       J=2--FFF (SUBCLASS OF VARIABLE),
C                       J=3--B (BINARY INDICATOR),
C                       J=4--DD (DATA SOURCE, MODEL NUMBER),
C                       J=5--V (VERTICAL APPLICATION),
C                       J=6--LBLBLBLB (BOTTOM OF LAYER, 0 IF ONLY 1 LAYER),
C                       J=7--LTLTLTLT (TOP OF LAYER),
C                       J=8--T (TRANSFORMATION),
C                       J=9--RR (RUN TIME OFFSET, ALWAYS + AND BACK IN TIME),
C                       J=10--OT (TIME APPLICATION),
C                       J=11--OH (TIME PERIOD IN HOURS),
C                       J=12--TAU (PROJECTION IN HOURS),
C                       J=13--I (INTERPOLATION TYPE),
C                       J=14--S (SMOOTHING INDICATOR), AND
C                       J=15--G (GRID INDICATOR).
C              THRESH = THE BINARY THRESHOLD ASSOCIATED WITH IDPARS( ).
C                       (INPUT)
C               JD(J) = THE BASIC INTEGER PREDICTOR ID (J=1,4).
C                       THIS IS THE SAME AS ID(J), EXCEPT THAT THE PORTIONS
C                       PERTAINING TO PROCESSING ARE OMITTED:
C                       B = IDPARS(3),
C                       T = IDPARS(8),
C                       I = IDPARS(13),
C                       S = IDPARS(14),
C                       G = IDPARS(15), AND
C                       THRESH.
C                       JD( ) IS USED TO IDENTIFY THE BASIC MODEL FIELDS
C                       AS READ FROM THE ARCHIVE.  (INPUT)
C               NDATE = THE DATE/TIME FOR WHICH PREDICTOR IS NEEDED.  (INPUT)
C           KFILRA(J) = HOLDS THE UNIT NUMBERS FOR ACCESSING THE MOS-2000
C                       EXTERNAL RANDOM ACCESS FILES (J=1,ND12).  (INPUT)
C           RACESS(J) = THE FILE NAMES CORRESPONDING TO KFILRA(J) (J=1,NUMRA).
C                       (CHARACTER*60)  (INPUT)
C               NUMRA = THE NUMBER OF UNIT NUMBERS AND NAMES IN KFILRA( )
C                       AND RACESS( ).  (INPUT)
C        ICALL(L,K,J) = 8 STATION CALL LETTERS AS CHARACTERS IN AN INTEGER
C                       VARIABLE (L=1,L3264W) (K=1,NSTA) (J=1,6).
C                       EQUIVALENCED TO CCALL( , )  (INPUT)
C          CCALL(K,J) = 8-CHARACTER STATION CALL LETTERS (OR GRIDPOINT
C                       LOCATIONS FOR GRID DEVELOPMENT) TO PROVIDE
C                       OUTPUT FOR (J=1) AND 5 POSSIBLE OTHER STATION
C                       CALL LETTERS (J=2,6) THAT CAN BE USED INSTEAD
C                       IF THE PRIMARY (J=1) STATION CANNOT BE FOUND 
C                       IN AN INPUT DIRECTORY (K=1,NSTA).  ALL STATION
C                       DATA ARE KEYED TO THIS LIST, EXCEPT POSSIBLY 
C                       CCALLD( ).  EQUIVALENCED TO ICALL( , , ).
C                       (CHARACTER*8)  (INPUT)
C         ICALLD(L,K) = 8 STATION CALL LETTERS AS CHARACTERS IN AN INTEGER
C                       VARIABLE (L=1,L3264W) (K=1,ND5).
C                       EQUIVALENCED TO CCALLD( ).  (INTERNAL)
C           CCALLD(K) = 8 STATION CALL LETTERS (K=1,ND5).  THIS LIST IS
C                       IN L1D1 TO READ THE REGION LISTS.  (CHARACTER*8)
C                       (INTERNAL)
C            NELEV(K) = ELEVATION OF STATIONS (K=1,NSTA).  (INPUT)
C           STALAT(K) = LATITUDE OF STATIONS (K=1,NSTA).  (INPUT)
C           STALON(K) = LONGITUDE OF STATIONS (K=1,NSTA).  (INPUT)
C           ITIMEZ(K) = TIME ZONE INDICATOR.  THE NUMBER OF HOURS
C                       THE STATION IS DIFFERENT FROM UTC (K=1,NSTA).
C                       (INPUT)
C           ISDATA(K) = WORK ARRAY (K=1,ND1).  (INTERNAL)
C            SDATA(K) = INTERPOLATED DATA TO RETURN, WHEN STATION DATA ARE
C                       BEING GENERATED (ISTAV=1) (K=1,NSTA).  (OUTPUT)
C           SDATA1(K) = WORK ARRAY RESERVED FOR USE IN L2D2 (K=1,NSTA).
C                       (INTERNAL)
C          DIR(K,J,M) = THE IX (J=1) AND JY (J=2) POSITIONS ON THE GRID
C                       FOR THE COMBINATION OF GRID CHARACTERISTICS M
C                       (M=1,NGRID) AND STATION K (K=1,NSTA) IN NGRIDC( ,M).
C                       (INPUT)
C                 ND1 = MAXIMUM NUMBER OF STATIONS THAT CAN BE DEALT WITH.
C                       FIRST DIMENSION OF DIR( , , ).  (INPUT)
C                NSTA = NUMBER OF STATIONS OR LOCATIONS BEING DEALT WITH.
C                       (INPUT)
C         NGRIDC(L,M) = HOLDS THE GRID CHARACTERISTICS (L=1,6) FOR EACH GRID
C                       COMBINATION (M=1,NGRID).
C                       L=1--MAP PROJECTION NUMBER (3=LAMBERT, 5=POLAR
C                            STEREOGRAPHIC). 
C                       L=2--GRID LENGTH IN METERS,
C                       L=3--LATITUDE AT WHICH GRID LENGTH IS CORRECT *1000,
C                       L=4--GRID ORIENTATION IN DEGREES *1000,
C                       L=5--LATITUDE OF LL CORNER IN DEGREES *1000,
C                       L=6--LONGITUDE OF LL CORNER IN DEGREES *1000.
C                ND11 = MAXIMUM NUMBER OF GRID COMBINATIONS THAT CAN BE
C                       DEALT WITH ON THIS RUN.  LAST DIMENSION OF
C                       NGRIDC( , ).  (INPUT)
C               NSLAB = RETURNED FROM GFETCH AS THE VALUE STORED IN
C                       LSTORE(10, )  WHEN IER NE 0, THIS
C                       VALUE SHOULD NOT BE USED.  (OUTPUT) 
C            IPACK(J) = WORK ARRAY (J=1,ND5).  (INTERNAL)
C            IWORK(J) = WORK ARRAY (J=1,ND5).  (INTERNAL)
C             DATA(J) = ARRAY TO HOLD RETURNED DATA (J=1,ND5) WHEN
C                       DATA ARE GRIDPOINT (ISTAV=0).  (OUTPUT)
C                 ND5 = DIMENSION OF IPACK( ), IWORK( ), AND DATA( ).
C                       (INPUT)
C         LSTORE(L,J) = THE ARRAY HOLDING INFORMATION ABOUT THE DATA 
C                       STORED (L=1,12) (J=1,LITEMS).  (INPUT-OUTPUT)
C                       L=1,4--THE 4 ID'S FOR THE DATA.
C                       L=5  --LOCATION OF STORED DATA.  WHEN IN CORE,
C                              THIS IS THE LOCATION IN CORE( ) WHERE
C                              THE DATA START.  WHEN ON DISK, 
C                              THIS IS MINUS THE RECORD NUMBER WHERE 
C                              THE DATA START.
C                       L=6  --THE NUMBER OF 4-BYTE WORDS STORED.
C                       L=7  --2 FOR DATA PACKED IN TDL GRIB, 1 FOR NOT.
C                       L=8  --THE DATE/TIME OF THE DATA IN FORMAT
C                              YYYYMMDDHH.
C                       L=9  --NUMBER OF TIMES DATA HAVE BEEN RETRIEVED.
C                       L=10 --NUMBER OF THE SLAB IN DIR( , ,L) AND
C                              IN NGRIDC( ,L) DEFINING THE CHARACTERISTICS
C                              OF THIS GRID.
C                       L=11 --THE NUMBER OF THE PREDICTOR IN THE SORTED
C                              LIST IN ID( ,N) (N=1,NPRED) FOR WHICH THIS
C                              VARIABLE IS NEEDED, WHEN IT IS NEEDED ONLY
C                              ONCE FROM LSTORE( , ).  WHEN IT IS NEEDED
C                              MORE THAN ONCE, THE VALUE IS SET = 7777.
C                       L=12 --USED INITIALLY IN ESTABLISHING MOSTORE( , ).
C                              LATER USED AS A WAY OF DETERMINING WHETHER
C                              TO KEEP THIS VARIABLE.
C                 ND9 = THE SECOND DIMENSION OF LSTORE( , ).  (INPUT)
C              LITEMS = THE NUMBER OF ITEMS (COLUMNS) IN LSTORE( , ) THAT 
C                       HAVE BEEN USED IN THIS RUN.
C             CORE(J) = THE ARRAY TO STORE OR RETIREVE THE DATA IDENTIFIED IN
C                       LSTORE( , ) (J=1,ND10).  WHEN CORE( ) IS FULL
C                       DATA ARE STORED ON DISK.  (OUTPUT)
C                ND10 = DIMENSION OF CORE( ).  (INPUT)
C              NBLOCK = THE BLOCK SIZE IN WORDS OF THE MOS-2000 RANDOM
C                       DISK FILE.  (INPUT)
C              NFETCH = INCREMENTED EACH TIME GFETCH IS ENTERED.
C                       IT IS A RUNNING  COUNT FROM THE BEGINNING OF THE 
C                       PROGRAM.  THIS COUNT IS MAINTAINED IN CASE THE USER 
C                       NEEDS IT (DIAGNOSTICS, ETC.).  (INTERNAL)
C              IS0(J) = MOS-2000 GRIB SECTION 0 ID'S (J=1,3).  (INTERNAL)
C              IS1(J) = MOS-2000 GRIB SECTION 1 ID'S (J=1,22+).  (INTERNAL)
C              IS2(J) = MOS-2000 GRIB SECTION 2 ID'S (J=1,12).  (INTERNAL)
C              IS4(J) = MOS-2000 GRIB SECTION 4 ID'S (J=1,4).  (INTERNAL)
C                 ND7 = DIMENSION OF IS0( ), IS1( ), IS2( ), AND IS4( ).
C                       NOT ALL LOCATIONS ARE USED.  (INPUT)
C  FD1(J),FD2(J), ETC = WORK ARRAYS (J=1,ND2X3).  THESE MAY BE USED IN
C                       ROUTINES AS 2-DIMENSIONAL ARRAYS, WHERE THE
C                       TOTAL ARRAY SIZE IS ND2*ND3=ND2X3 AS DECLARED IN
C                       THE CALLING PROGRAM.  DATA( ) IS USED FOR THE
C                       FIRST VARIABLE FETCHED, AND FDTIME( ) IS USED FOR 
C                       THE SECOND.  (INTERNAL)
C           FDVERT(J) = TEMPORARY STORAGE RESERVED FOR SUBROUTINE VERTP
C                       (J=1,ND2X3).
C           FDTIME(J) = TEMPORARY STORAGE RESERVED FOR SUBROUTINE TEMEP
C                       (J=1,ND2X3).
C       FDSINS(IX,JY) = USED TO SAVE THE SIN OF THE LATITUDE IN SUBROUTINE
C                       PSMAPF (IX=1,NX) (JY=1,NY).  THE USER MUST NOT
C                       USE THIS ARRAY EXCEPT IN CALLING PSMAPF.
C                       (INPUT/OUTPUT)
C         FDMS(IX,JY) = USED TO SAVE THE MAP FACTOR IN SUBROUTINE
C                       PSMAPF (IX=1,NX) (JY=1,NY).  THE USER MUST NOT
C                       USE THIS ARRAY EXCEPT IN CALLING PSMAPF.
C                       (INPUT/OUTPUT)
C               ND2X3 = DIMENSION OF FD1( ), FD2( ), ETC.  (INPUT)
C               ISTAV = 0 SINCE THE DATA RETURNED ARE GRID DATA.  (OUTPUT)
C              L3264B = INTEGER WORD LENGTH IN BITS OF MACHINE BEING USED
C                       (EITHER 32 OR 64).  (INPUT)
C              L3264W = NUMBER OF WORDS IN 64 BITS, EITHER 1 OR 2.  (INPUT)
C              MISTOT = TOTAL NUMBER OF TIMES A MISSING INDICATOR
C                       HAS BEEN ENCOUNTERED IN UNPACKING GRIDS.
C                       (INPUT-OUTPUT)
C                 IER = STATUS RETURN.
C                         0 = GOOD RETURN.
C                       100 = THE TWO GRIDS NEEDED ARE NOT THE SAME SIZE.
C                       102 = PROCESSING INDICATOR NOT ACCOMMODATED.
C                       SEE GFETCH FOR OTHER VALUES.  (INTERNAL-OUTPUT)
C              NTIMES = THE NUMBER OF TIMES, INCLUDING THIS ONE, THAT THE 
C                       RECORD HAS BEEN FETCHED.  THIS IS STORED IN
C                       LSTORE(9, ).  (INTERNAL)
C               LD(J) = HOLDS THE 4 ID WORDS OF THE DATA RETRIEVED INTO
C                       DATA( ) (J=1,4).  (INTERNAL)
C               MD(J) = HOLDS THE 4 ID WORDS OF THE DATA RETRIEVED INTO
C                       FDTIME( ) (J=1,4).  (INTERNAL)
C              NSLAB1 = RETURNED FROM GFETCH AS THE VALUE STORED IN
C                       LSTORE(10, ) FOR THE FIRST FIELD.  (INTERNAL)
C              NSLAB2 = RETURNED FROM GFETCH AS THE VALUE STORED IN
C                       LSTORE(10, ) FOR THE SECOND FIELD.  (INTERNAL)
C              NWORDS = NUMBER OF WORDS RETURNED IN DATA( ).  (INTERNAL)
C               MISSP = PRIMARY MISSING VALUE INDICATOR.  RETURNED AS ZERO
C                       WHEN DATA ARE NOT PACKED.  (INTERNAL)
C               MISSS = SECONDARY MISSING VALUE INDICATOR.  RETURNED AS ZERO
C                       WHEN DATA ARE NOT PACKED.  (INTERNAL)
C               NXCHK = NUMBER OF GRIDPOINTS IN X-DIRECTION OF A COARSE
C                       GRID TO COMPARE AGAINST A FINE GRID.  (INTERNAL)
C               NYCHK = NUMBER OF GRIDPOINTS IN Y-DIRECTION OF A COARSE
C                       GRID TO COMPARE AGAINST A FINE GRID.  (INTERNAL)
C 
C        NONSYSTEM SUBROUTINES CALLED 
C            OPTN2, DENSRM
C
      CHARACTER*8 CCALL(ND1,6),
     1            CCALLD(ND5)
      CHARACTER*20 NAME(ND1)
      CHARACTER*60 RACESS(NUMRA)
C
      DIMENSION ID(4),IDPARS(15),JD(4)
      DIMENSION ICALL(L3264W,ND1,6),
     1          NELEV(ND1),STALAT(ND1),STALON(ND1),ITIMEZ(ND1),
     2          ISDATA(ND1),SDATA(ND1),SDATA1(ND1)
      DIMENSION IPACK(ND5),IWORK(ND5),DATA(ND5),
     1          ICALLD(L3264W,ND5)
      DIMENSION FD1(ND2X3),FD2(ND2X3),FD3(ND2X3),FD4(ND2X3),
     1          FD5(ND2X3),FD6(ND2X3),FD7(ND2X3),
     2          FDVERT(ND2X3),FDTIME(ND2X3),FDSINS(ND2X3),FDMS(ND2X3)
      DIMENSION IS0(ND7),IS1(ND7),IS2(ND7),IS4(ND7)
      DIMENSION LSTORE(12,ND9)
      DIMENSION CORE(ND10)
      DIMENSION DIR(ND1,2,ND11),NGRIDC(6,ND11)
      DIMENSION KFILRA(NUMRA)
      DIMENSION LD(4),LDPARS(15)
      DIMENSION MD(4),MDPARS(15)
C
      IER=0
      ISTAV=0
C
D     WRITE(KFILDO,100)(ID(J),J=1,4)
D100  FORMAT(/' IN TIMEP, ID( ) ='4I12)
C        GET THE FIRST VARIABLE.  THE ID INCLUDES THE RUN OFFSET TIME.
C
      LD(1)=JD(1)
      LD(2)=JD(2)
      LD(3)=IDPARS(9)*1000000+IDPARS(12)+IDPARS(11)
      LD(4)=0
C        LD( ) IS IN BASIC PREDICTOR FORMAT.
      IF(IDPARS(5).NE.0)GO TO 110
C        ABOVE TEST ASSUMES NO VERTICAL APPLICATION IDPARS(5, ) HAS BEEN 
C        DONE ON THE INPUT.  IF THIS IS NOT TRUE, JUST REMOVE THE ABOVE 
C        STATEMENT HERE AND IN PRED12.  THIS TEST IS NOT CRITICAL;
C        U201 WILL RUN CORRECTLY WITHOUT IT.
      CALL GFETCH(KFILDO,KFIL10,LD,7777,LSTORE,ND9,LITEMS,
     1            IS0,IS1,IS2,IS4,ND7,IPACK,IWORK,DATA,ND2X3,
     2            NWORDS,NPACK,NDATE,NTIMES,CORE,ND10,
     3            NBLOCK,NFETCH,NSLAB1,MISSP,MISSS,L3264B,1,IER)
C        ND2X3 IS USED AS DIMENSION TO PASS INSTEAD OF ND5; THIS WILL
C        BE BIG ENOUGH.     
      IF(MISSP.NE.0)MISTOT=MISTOT+1
      ISTAV1=0
      IF(NPACK.EQ.1)ISTAV1=1
C        WHEN DATA ARE PACKED (NOT PACKED), IT IS ASSUMED THEY
C        ARE GRIDPOINT (VECTOR).
      IF(IER.EQ.0)GO TO 120
      IF(IER.NE.47)GO TO 800
C        IER = 47 MEANS THE DATA COULD NOT BE FOUND.  TRY TO COMPUTE
C        THE FIELD IN OPTN2.
 110  CALL PRSID1(KFILDO,LD,LDPARS)
C        LD( ) IS IN BASIC PREDICTOR FORMAT.  PUT LDPARS( ) TO MATCH,
C        SINCE LD(3) MAY NOT EQUAL JD(3).  LD( ) HAS TO DO WITH TIME,
C        AND IS THE SAME FOR THE VARIABLE NEEDED THROUGH OPTN2.
      CALL OPTN2(KFILDO,KFIL10,NFIRST,
     1           LD,LDPARS,THRESH,LD,NDATE,
     2           KFILRA,RACESS,NUMRA,
     3           ICALL,CCALL,ICALLD,CCALLD,NAME,
     4           NELEV,STALAT,STALON,
     5           ITIMEZ,ISDATA,SDATA,SDATA1,DIR,ND1,NSTA,
     6           NGRIDC,NGRID,ND11,NSLAB1,IPACK,IWORK,DATA,ND5,
     7           LSTORE,ND9,LITEMS,CORE,ND10,NBLOCK,NFETCH,
     8           IS0,IS1,IS2,IS4,ND7,
     9           FD1,FD2,FD3,FD4,FD5,FD6,FD7,
     A           FDVERT,FDTIME,FDSINS,FDMS,ND2X3,
     B           ISTAV1,L3264B,L3264W,MISTOT,IER)
      IF(IER.NE.0)GO TO 800
C
C        IF DATA ARE VECTOR, THEY COME BACK IN SDATA( ); PUT THEM
C        INTO DATA( ) FOR LATER CALUCLATIONS.  GRIDPOINT DATA ARE
C        ALREADY IN DATA( ).
C
      IF(ISTAV1.EQ.0)GO TO 120
C
      DO 124 J=1,IS2(3)*IS2(4)
      DATA(J)=SDATA(J)
 124  CONTINUE
C
 120  NX=IS2(3)
      NY=IS2(4)
C
C        GET THE SECOND VARIABLE.  THE ID INCLUDES THE RUN OFFSET TIME.
C
 125  MD(1)=JD(1)
      MD(2)=JD(2)
      MD(3)=IDPARS(9)*1000000+IDPARS(12)
      IF(IDPARS(10).GT.4)MD(3)=IDPARS(12)
      MD(4)=0
C        MD( ) IS IN BASIC PREDICTOR FORMAT.
      IF(IDPARS(5).NE.0)GO TO 130
C        ABOVE TEST ASSUMES NO VERTICAL APPLICATION IDPARS(5, ) HAS BEEN 
C        DONE ON THE INPUT.  IF THIS IS NOT TRUE, JUST REMOVE THE ABOVE 
C        STATEMENT HERE AND IN PRED12.  THIS TEST IS NOT CRITICAL;
C        U201 WILL RUN CORRECTLY WITHOUT IT.
      CALL GFETCH(KFILDO,KFIL10,MD,7777,LSTORE,ND9,LITEMS,
     1            IS0,IS1,IS2,IS4,ND7,IPACK,IWORK,FDTIME,ND2X3,
     2            NWORDS,NPACK,NDATE,NTIMES,CORE,ND10,
     3            NBLOCK,NFETCH,NSLAB2,MISSP,MISSS,L3264B,1,IER)
      IF(MISSP.NE.0)MISTOT=MISTOT+1
      ISTAV2=0
      IF(NPACK.EQ.1)ISTAV2=1
C        WHEN DATA ARE PACKED (NOT PACKED), IT IS ASSUMED THEY
C        ARE GRIDPOINT (VECTOR).
      IF(IER.EQ.0)GO TO 136
      IF(IER.NE.47)GO TO 800
C        IER = 47 MEANS THE DATA COULD NOT BE FOUND.  TRY TO COMPUTE
C        THE FIELD IN OPTN2.
 130  CALL PRSID1(KFILDO,MD,MDPARS)
C        MD( ) IS IN BASIC PREDICTOR FORMAT.  PUT MDPARS( ) TO MATCH,
C        SINCE MD(3) MAY NOT EQUAL JD(3).  MD( ) HAS TO DO WITH TIME,
C        AND IS THE SAME FOR THE VARIABLE NEEDED THROUGH OPTN2.
      CALL OPTN2(KFILDO,KFIL10,NFIRST,
     1           MD,MDPARS,THRESH,MD,NDATE,
     2           KFILRA,RACESS,NUMRA,
     3           ICALL,CCALL,ICALLD,CCALLD,NAME,
     4           NELEV,STALAT,STALON,
     5           ITIMEZ,ISDATA,SDATA,SDATA1,DIR,ND1,NSTA,
     6           NGRIDC,NGRID,ND11,NSLAB2,IPACK,IWORK,FDTIME,ND2X3,
     7           LSTORE,ND9,LITEMS,CORE,ND10,NBLOCK,NFETCH,
     8           IS0,IS1,IS2,IS4,ND7,
     9           FD1,FD2,FD3,FD4,FD5,FD6,FD7,
     A           FDVERT,FDTIME,FDSINS,FDMS,ND2X3,
     B           ISTAV2,L3264B,L3264W,MISTOT,IER)
C        ND2X3 IS DIMENSION OF FDTIME( ).
      IF(IER.NE.0)GO TO 800
C
C        IF DATA ARE VECTOR, PUT THEM INTO FDTIME( ) FOR LATER
C        CALUCLATIONS.  GRIDPOINT DATA ARE ALREADY IN FDTIME( ).
C
      IF(ISTAV2.EQ.0)GO TO 140
C
      DO 135 J=1,IS2(3)*IS2(4)
      FDTIME(J)=SDATA(J)
 135  CONTINUE
C
 136  IF(ISTAV2.EQ.0)GO TO 140
C
      IF(NX.EQ.IS2(3).AND.NY.EQ.IS2(4))GO TO 200
      WRITE(KFILDO,138)(LD(J),J=1,4),NX,NY,
     1                 (MD(J),J=1,4),IS2(3),IS2(4)
 138  FORMAT(/' ****THE TWO VECTORS NEEDED IN TIMEP HAVE DIFFERENT',
     1        ' SIZES.  PREDICTOR NOT COMPUTED.',
     2        '  VALUES FROM NX, NY.'/
     3       ('     ',I9.9,I10.9,I10.9,I4.3,4X,2I6))
      IER=100
      GO TO 800
C
CSDS-ADDED
 140  IF(NX.NE.IS2(3).OR.NY.NE.IS2(4).OR.NSLAB1.NE.NSLAB2)THEN 
C
         NXCHK=((NX-1)*2)+1
         NYCHK=((NY-1)*2)+1
C
         write(88,*)NX,NXCHK,NY,NYCHK,NGRIDC(5,NSLAB1),NGRIDC(5,NSLAB2)
         IF(IS2(3).EQ.NXCHK.AND.IS2(4).EQ.NYCHK.AND.
     1      NGRIDC(5,NSLAB1).EQ.NGRIDC(5,NSLAB2).AND.
     2      NGRIDC(6,NSLAB1).EQ.NGRIDC(6,NSLAB2))THEN
C
C        CHECK TO SEE IF THE DIFFERENT GRID ARE JUST A CHANGE
C        IN RESOLUTION, BUT REALLY ARE THE SAME GRID.
C
C        THE LOGIC HERE IS ASSUMING THAT THE COARSE GRID WILL
C        ALWAYS BE IN A LATER FORECAST PROJECTION THAN THE FINE
C        GRID.
C
           CALL DENSRM(KFILDO,DATA,NX,NY,NXCHK*NYCHK)
           IDENS=1
C
C          DENSRM WILL CREATE A GRID OF LINEARLY INTERPOLATED
C          VALUES FROM THE COARSE GRID TO THE FINE GRID.
C
         ELSE
C
         WRITE(KFILDO,150)(JD(L),L=1,4)
         WRITE(KFILDO,150)(LD(J),J=1,4),(NGRIDC(J,NSLAB1),J=1,6),NX,NY,
     1                    (MD(J),J=1,4),(NGRIDC(J,NSLAB2),J=1,6),
     2                    IS2(3),IS2(4)
 150       FORMAT(/' ****THE TWO GRIDS NEEDED IN TIMEP HAVE DIFFERENT',
     1             ' CHARACTERISTICS.  PREDICTOR NOT COMPUTED.',
     2             '  VALUES FROM NGRIDC( , ) AND NX, NY.'/
     3             (5X,I9.9,I10.9,I10.9,I4.3,4X,6I10,4X,2I5))
           IER=100
           GO TO 800
C
         ENDIF
C
      ENDIF
C
 200  NSLAB=NSLAB1
C
C        CHECK ISTAV FROM BOTH RETURNS.
C
 206  IF(ISTAV1.NE.ISTAV2)THEN
         WRITE(KFILDO,208)(JD(J),J=1,4)
 208     FORMAT(/' ****TYPES OF DATA--VECTOR OR GRID--FOR',
     1           ' CALCULATIONS DO NOT AGREE'/
     2           '     PREDICTOR ',I9.9,I10.9,I10.9,I4.3,
     3           ' NOT COMPUTED IN TIMEP.')
         IER=101
         GO TO 800
      ELSE
         ISTAV=ISTAV1
      ENDIF
C
      IF(ISTAV.EQ.1)GO TO 310
C
C        PERFORM COMPUTATIONS FOR GRIDPOINT DATA.  DATA ARE RETURNED
C        IN DATA( ).  ASSUME NO MISSING VALUES.
C
      IF(IDPARS(10).EQ.1.OR.
     1   IDPARS(10).EQ.5)THEN
C
         DO 211 J=1,NX*NY
         DATA(J)=(FDTIME(J)+DATA(J))/2.
 211     CONTINUE
C
      ELSE IF(IDPARS(10).EQ.2)THEN
C
         DO 212 J=1,NX*NY
         DATA(J)=DATA(J)-FDTIME(J)
 212     CONTINUE
C
      ELSE IF(IDPARS(10).EQ.6)THEN
C
         DO 213 J=1,NX*NY
         DATA(J)=FDTIME(J)-DATA(J)
 213     CONTINUE
C
      ELSE IF(IDPARS(10).EQ.3.OR.
     1        IDPARS(10).EQ.7)THEN
C
         DO 214 J=1,NX*NY
         DATA(J)=MAX(FDTIME(J),DATA(J))
 214     CONTINUE
C
      ELSE IF(IDPARS(10).EQ.4.OR.
     1        IDPARS(10).EQ.8)THEN
C
         DO 215 J=1,NX*NY
         DATA(J)=MIN(FDTIME(J),DATA(J))
 215     CONTINUE
C
      ELSE
         WRITE(KFILDO,219)(JD(L),L=1,4),IDPARS(5)
 219     FORMAT(/' ****TIMEP ENTERED FOR PREDICTOR',
     1             I11.9,I10.9,I10.9,I11.3,
     2           ' WITH PROCESSING IDPARS(5) = ',I3,
     3           ' NOT ACCOMMODATED.  CONTINUING.')
         IER=102
         GO TO 800
C
      ENDIF
C
      GO TO 850
C
C        PERFORM COMPUTATIONS FOR VECTOR DATA.  DATA ARE RETURNED
C        IN SDATA( ).  MISSING VALUES CAN BE PRESENT.
C
 310  IF(IDPARS(10).EQ.1.OR.
     1   IDPARS(10).EQ.5)THEN
C
         DO 311 J=1,NX*NY
C
         IF(DATA(J).NE.9999..AND.FDTIME(J).NE.9999.)THEN
            SDATA(J)=(FDTIME(J)+DATA(J))/2.
         ELSE
            SDATA(J)=9999.
         ENDIF
C
 311     CONTINUE
C
      ELSE IF(IDPARS(10).EQ.2)THEN
C
         DO 312 J=1,NX*NY
C
         IF(DATA(J).NE.9999..AND.FDTIME(J).NE.9999.)THEN
            SDATA(J)=DATA(J)-FDTIME(J)
         ELSE
            SDATA(J)=9999.
         ENDIF
C
 312     CONTINUE
C
      ELSE IF(IDPARS(10).EQ.6)THEN
C
         DO 313 J=1,NX*NY
C
         IF(DATA(J).NE.9999..AND.FDTIME(J).NE.9999.)THEN
            SDATA(J)=FDTIME(J)-DATA(J)
         ELSE
            SDATA(J)=9999.
         ENDIF
C
 313     CONTINUE
C
      ELSE IF(IDPARS(10).EQ.3.OR.
     1        IDPARS(10).EQ.7)THEN
C
         DO 314 J=1,NX*NY
C
         IF(DATA(J).NE.9999..AND.FDTIME(J).NE.9999.)THEN
            SDATA(J)=MAX(FDTIME(J),DATA(J))
         ELSE
            SDATA(J)=9999.
         ENDIF
C
 314     CONTINUE
C
      ELSE IF(IDPARS(10).EQ.4.OR.
     1        IDPARS(10).EQ.8)THEN
C
         DO 315 J=1,NX*NY
C
         IF(DATA(J).NE.9999..AND.FDTIME(J).NE.9999.)THEN
            SDATA(J)=MIN(FDTIME(J),DATA(J))
         ELSE
            SDATA(J)=9999.
         ENDIF
C
 315     CONTINUE
C
      ELSE
         WRITE(KFILDO,219)(JD(L),L=1,4),IDPARS(5)
         IER=102
         GO TO 800
C
      ENDIF
C
      GO TO 850
C
C        THIS PREDICTOR CANNOT BE COMPUTED.  SET THE ARRAY TO MISSING.
C        NOTE THAT ISTAV=0, SO THE CORRECT ARRAY WILL BE INDICATED --
C        DATA( ) FOR GRIDPOINT DATA.
C
 800  DO 801 J=1,ND2X3
      DATA(J)=9999.
 801  CONTINUE 
C
 850  RETURN
      END     
                  
