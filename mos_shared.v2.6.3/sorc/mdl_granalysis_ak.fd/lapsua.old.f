      SUBROUTINE LAPSUA(KFILDO,KFIL10,IP14,ID,IDPARS,
     1                  CCALL,NAME,LNDSEA,
     2                  DIR,NGRIDC,ND11,LAPFG,FL174,
     3                  XDATA,XLAPSE,ELEVLO,ELEVHI,ELEV,NSTA,ND1,
     4                  ALATL,ALONL,XPL,YPL,NXL,NYL,BMESH,
     5                  NORUNS,LEVELS,MGUESS,IBACKN,IBACKL,
     6                  LSTORE,ND9,LITEMS,NDATE,MODNUM,ND6,
     7                  IS0,IS1,IS2,IS4,ND7,
     8                  IPACK,IWORK,DATA,ND5,
     9                  CORE,ND10,NBLOCK,NFETCH,MISTOT,NSLAB,
     A                  NPROJ,ORIENT,XLAT,L3264B,ISTOP,IER)
C
C        OCTOBER   2007   GLAHN   MDL   MOS-2000
C        OCTOBER   2007   GLAHN   MODIFIED ALGORITHM
C        OCTOBER   2007   GLAHN   CHANGED IF(L.EQ.1) TO IF(L.LE.4)
C                                 ABOVE DO 135
C        DECEMBER  2007   GLAHN   ADDED ISTOP(6) CAPABILITY
C        DECEMBER  2007   GLAHN   ADDED RETURN STATEMENT; UPDATED
C                                 ITABLE( , ); REMOVED 200 FOR
C                                 INTERPOLATION IN 4TH WORD OF UA ID
C        FEBRUARY  2008   GLAHN   COMMENTS
C        MARCH     2008   GLAHN   REMOVED COMPUTATION DOWNWARD
C        MARCH     2008   GLAHN   ADDED BACKUP CYCLES, IGUESS AND
C                                 MGUESS TO CALL 
C        MAY       2008   GLAHN   EXPANDED TO WIND U, V, AND SPEED
C        MAY       2008   GLAHN   REMOVED IGUESS( )
C        MAY       2008   GLAHN   COMMENTS; IF TEST BEFORE 220/221;
C                                 ADDED WIND GUSTS; ADDED XSAVE( ),
C                                 IDSAV( ) 
C        AUGUST    2008   GLAHN   MODIFIED TO USE ARCHIVE UA GRIDS 
C        SEPTEMBER 2008   GLAHN   NDATSV MADE A SAVE VARIABLE; 
C                                 CORRECTED IDPARS(12) TO IDPARS(4)
C                                 IN TESTS ABOVE 109; MODIFIED
C                                 FORMAT 125, ADDED FORMAT 1624;
C                                 ADDED LAPFG
C        SEPTEMBER 2008   GLAHN   DIAGNOSTIC PRINT MADE MORE SPECIFIC
C                                 WHEN LAPSE IS REUSED
C        SEPTEMBER 2008   GLAHN   PURPOSE MODIFIED TO INCLUDE LAPFG
C        OCTOBER   2008   GLAHN   CHANGED IS2(4) AND IS2(5) TO IS2(3)
C                                 AND IS2(4), RESPECTIVELY
C        OCTOBER   2008   GLAHN   REINSERTED THE TEST FOR ISG=200
C                                 NEEDED FOR SOME TEST DATA.
C        OCTOBER   2008   COSGROVE   ADDED COMMAS FOR IBM COMPILE
C        NOVEMBER  2008   GLAHN   ADDED CHECKING FOR PAST 6-H FORECAST
C                                 FOR MAX TEMP PROBLEM AT 198 HR;
C                                 INCREMENTED ISTOP(1) TWICE
C        NOVEMBER  2008   GLAHN   SET IER=0 BELOW 1090 AND 110
C        NOVEMBER  2008   GLAHN   SEVERAL CHANGES RELATED TO USING
C                                 PREVIOUS CALCULATED LAPSE AND UA
C                                 DATA; ADDED FL174
C
C        PURPOSE
C            TO COMPUTE A LAPSE RATE FOR EACH STATION OF THE VARIABLE
C            BEING ANALYZED FROM UPPER AIR AND POSSIBLY SURFACE DATA.
C            AVERAGE OF RUNS (CYCLES) IS USED FOR SURFACE DATA, BUT
C            ONLY THE ON-TIME CYCLE OF UPPER AIR DATA AND ONE LEVEL.
C            LEVEL IS USED FOR PROBABILITY LEVELS AND WILL NEED
C            SPECIAL TREATMENT.
C
C            THE LAPSE CAN BE COMPUTED IIN ONE OF TWO WAYS DEPENDING
C            ON THE VALUE OF LAPFG:
C
C            LAPFG = 2.
C              THE LAPSE IS COMPUTED FROM THE FIRST LEVEL ABOVE THE
C              STATION ELEVATION ELEV( ) TO THE FIRST LEVEL ABOVE THE
C              HIGHEST GRIDPOINT TO CORRECT WITH THIS STATION
C              ELEVHI( ).  IT DOES NOT USE THE DATA TO ANALYZE.  THIS
C              MAY NOT WORK WELL IN INTENSE INVERSIONS.
C
C              NOTE THAT THIS COMPUTES A GRADIENT BASED ON ONLY UPPER
C              AIR DATA, BUT APPLIES IT TO THE SURFACE OBSERVATION.
C              THE RESULTING VALUE (E.G. TEMPERATURE) AT HIGH 
C              ELEVATIONS SHOULD NOT BE GREATLY DIFFERENT FROM THE
C              UPPER AIR VALUE AT THAT ELEVATION.  FOR WIND U AND V,
C              THE INFLUENCE OF TERRAIN (FRICTION) ON THE SURFACE
C              WIND WILL BE FELT FOR SOME ELEVATIONS ABOVE A BASE
C              STATION, BUT EVENTUALLY, AT HIGH ELEVATIONS, BE NOT FAR 
C              DIFFERENT FROM THE UPPER AIR COMPONENTS, AND THEREFORE
C              A COMPUTED DIRECTION.
C
C            LAPFG = 3.
C              THE LAPSE IS COMPUTED FROM THE STATION VALUE AT ITS
C              ELEVATION TO THE FIRST LEVEL ABOVE THE HIGHEST
C              GRIDPOINT TO CORRECT WITH THIS STATION ELEVHI( ).
C              BECAUSE THE ELEVATION CORRECTION IS TO BE APPLIED
C              TO THE SURFACE VALUE, IT SEEMS LAPFG = 3 SHOULD BE
C              BETTER THAN LAPFG = 2.
C
C            THE INTERPOLATION IS TO ALL STATIONS IN THE NSTA LIST,
C            NOT JUST THE ONES WITH DATA TO ANALYZE.  THIS COULD BE
C            TRIMMED TO ONLY INTERPOLATE FOR NON-MISSING AND 
C            NON-WATER POINTS WITH SOME EXTRA CODING.  FOR ALASKA,
C            THIS IS NOT WORTH THE EFFORT, AND LAPSUA IS NOT 
C            CURRENTLY USED FOR THE CONUS WHERE THE STATION LIST
C            IS LONG.
C
C            THERE CANNOT BE AN EXACT MATCH OF UP TEMPERATURE DATA
C            WITH MAX AND MIN, BECAUSE THEY COVED A PERIOD.  THE
C            UA TAU USED IS THE SAME AS THE MAX OR MIN ANALYSIS.
C
C            WHEN A MATCH OF TAU FOR UA DATA IS NOT FOUND, IBACKN
C            OR IBACKL IS USED TO LOOK FOR PRIOR DATES THAT VERIFY
C            AT THE SAME TIME.  IF ONE CANNOT BE FOUND, THEN A TAU
C            6-H PREVIOUS FOR THE SAME DATE IS TRIED.  THIS IS
C            PRIMARILY FOR MAX TEMP.
C
C            *******************************************************
C            THIS VERSION FOR WHEN UA DATA ARE ON THE ORIGINAL
C            ARCHIVED 95 OR 190 KM GRID.  IT MAY WORK FOR OTHER
C            ARCHIVE GRIDS OVER ALASKA.
C            *******************************************************
C
C           NOTE:  CURRENTLY ACCOMMODATES TEMPERATURE (CONVERSION OF
C                  UNITS AT DO 135) AND WIND (CONVERSION OF UNITS
C                  AT DO 136).  THE ORDER OF THE VARIABLES IN
C                  ITABLE( , , ) IS IMPORTANT.
C
C        DATA SET USE
C            KFILDO   - UNIT NUMBER OF OUTPUT (PRINT) FILE.  (OUTPUT)
C            KFIL10   - UNIT NUMBER FOR INTERNAL RANDOM ACCESS STORAGE.
C                       (INPUT/OUTPUT)
C            IP14     - UNIT NUMBER FOR WRITING COMPUTED LAPSE RATES.
C                       (OUTPUT)
C
C        VARIABLES
C              KFILDO = UNIT NUMBER OF OUTPUT (PRINT) FILE.  (INPUT)
C              KFIL10 = UNIT NUMBER FOR INTERNAL RANDOM ACCESS STORAGE.
C                       (INPUT)
C                IP14 = UNIT NUMBER FOR WRITING COMPUTED LAPSE
C                       RATES.  (INPUT)
C               ID(J) = ID OF VARIABLE BEING ANALYZED (J=1,4).
C                       (INPUT)
C           IDPARS(J) = THE PARSED, INDIVIDUAL COMPONENTS OF THE
C                       ID'S CORRESPONDING TO ID( )
C                       (J=1,15).  (INPUT)
C                       J=1--CCC (CLASS OF VARIABLE),
C                       J=2--FFF (SUBCLASS OF VARIABLE),
C                       J=3--B (BINARY INDICATOR),
C                       J=4--DD (DATA SOURCE, MODEL NUMBER),
C                       J=5--V (VERTICAL APPLICATION),
C                       J=6--LBLBLBLB (BOTTOM OF LAYER, 0 IF ONLY 
C                            1 LAYER),
C                       J=7--LTLTLTLT (TOP OF LAYER),
C                       J=8--T (TRANSFORMATION),
C                       J=9--RR (RUN TIME OFFSET, ALWAYS + AND BACK 
C                            IN TIME),
C                       J=10--OT (TIME APPLICATION),
C                       J=11--OH (TIME PERIOD IN HOURS),
C                       J=12--TAU (PROJECTION IN HOURS),
C                       J=13--I (INTERPOLATION TYPE),
C                       J=14--S (SMOOTHING INDICATOR), AND
C                       J=15--G (GRID INDICATOR).
C            CCALL(K) = 8-CHARACTER STATION CALL LETTERS (K=1,NSTA).
C                       (CHARACTER*8)  (INPUT)
C             NAME(K) = 20-CHARACTER STATION NAME (K=1,NSTA).
C                       (CHARACTER*20)  (INPUT)
C           LNDSEA(K) = LAND/SEA INFLUENCE FLAG FOR EACH STATION
C                       (K=1,ND1).
C                       0 = WILL BE USED FOR ONLY OCEAN WATER (=0)
C                           GRIDPOINTS.
C                       3 = WILL BE USED FOR ONLY INLAND WATER (=3)
C                           GRIDPOINTS.
C                       6 = WILL BE USED FOR BOTH INLAND WATER (=3)
C                           AND LAND (=9) GRIDPOINTS.
C                       9 = WILL BE USED FOR ONLY LAND (=9) GRIDPOINTS.
C                       (INPUT)
C          DIR(K,J,M) = THE IX (J=1) AND JY (J=2) POSITIONS ON THE GRID
C                       FOR THE COMBINATION OF GRID CHARACTERISTICS M
C                       (M=1,NGRID) AND STATION K (K=1,NSTA) IN 
C                       NGRIDC( M).  (INPUT)
C         NGRIDC(L,M) = HOLDS THE GRID CHARACTERISTICS (L=1,6) FOR EACH GRID
C                       COMBINATION (M=1,NGRID).
C                       L=1--MAP PROJECTION NUMBER (3=LAMBERT, 5=POLAR
C                            STEREOGRAPHIC). 
C                       L=2--GRID LENGTH IN METERS,
C                       L=3--LATITUDE AT WHICH GRID LENGTH IS CORRECT,
C                       L=4--GRID ORIENTATION IN DEGREES, AND
C                       L=5--LATITUDE OF LL CORNER IN DEGREES,
C                       L=6--LONGITUDE OF LL CORNER IN DEGREES
C                       (INPUT)
C                ND11 = MAXIMUM NUMBER OF GRID COMBINATIONS THAT CAN BE
C                       DEALT WITH ON THIS RUN.  LAST DIMENSION OF
C                       NGRIDC( , ).  (INPUT)
C               LAPFG = 0 COMPUTE LAPSE FROM DATA (NOT IN LAPSUA).
C                       1 COMPUTE LAPSE FROM FIRST GUESS (NOT IN LAPSUA).
C                       2 COMPUTE LAPSE FROM UPPER AIR DATA (IN LAPSUA).
C                       3 COMPUTE LAPSE FROM UPPER AIR DATA AND
C                         SURFACE DATA (IN LAPSUA).
C                       (INPUT)
C               FL174 = THE FILE NAME OF THE FILE PREPARED BY U174.
C                       (CHARACTER*60)  (INPUT)
C        XDATA(K,J,L) = HOLDS THE DATA TO ANALYZE (K=1,NSTA)
C                       (J=2,NORUNS) (L=1,LEVELS).
C                       THE DATA FOR THE FIRST CYCLE, IF THERE IS
C                       MORE THAN ONE, IS IN COLUMN 2.  PROBABILITY
C                       LEVELS ARE IN THE 3RD DIMENSION.
C                       DATA ARE READ INTO COLUMNS J=2,NORUNS.  THE
C                       DATA TO ANALYZE ARE PUT INTO COLUMN J=1.
C                       (INPUT)
C           XLAPSE(K) = CALCULATED LAPSE RATE IN UNITS OF THE VARIABLE
C                       BEING ANALYZED PER M. (K=1,KSTA).  THIS IS
C                       NEVER 9999, BUT RATHER 0 WHEN THERE IS NO
C                       LAPSE RATE CALCULATED.  (OUTPUT)
C           ELEVLO(K) = THE LOW ELEVATION ASSOCIATED WITH STATION
C                       CCALL(K) (K=1,NSTA).  (INPUT)
C           ELEVHI(K) = THE HIGH ELEVATION ASSOCIATED WITH STATION
C                       CCALL(K) (K=1,NSTA).  (INPUT)
C             ELEV(K) = ELEVATION OF STATIONS (K=1,NSTA).  (INPUT)
C                NSTA = NUMBER OF STATIONS OR LOCATIONS BEING DEALT
C                       WITH.  (INPUT)
C                 ND1 = MAXIMUM NUMBER OF STATIONS THAT CAN BE DEALT
C                       WITH.  (INPUT) 
C               ALATL = NORTH LATITUDE OF LOWER LEFT CORNER POINT
C                       OF A GRID OF THE SIZE  NXL, NYL.  TRUNCATED
C                       TO TEN THOUSANDTHS OF DEGREES.  NOTE THAT THE
C                       MOS-2000 ARCHIVE IS ONLY TO THOUSANDTHS OF
C                       DEGREES.  (INPUT)
C               ALONL = WEST LONGITUDE OF LOWER LEFT CORNER POINT
C                       OF A  GRID OF THE SIZE  NXL, NYL.  TRUNCATED
C                       TO TEN THOUSANDTHS OF DEGREES.  NOTE THAT THE
C                       MOS-2000 ARCHIVE IS ONLY TO THOUSANDTHS OF
C                       DEGREES.  (INPUT)
C              XPL(K) = THE X POSITION FOR STATION K (K=1,NSTA) ON
C                       THE ANALYSIS GRID AREA AT THE MESH LENGTH 
C                       MESHB.  (INPUT)
C              YPL(K) = THE Y POSITION FOR STATION K (K=1,NSTA) ON
C                       THE ANALYSIS GRID AREA AT THE MESH LENGTH
C                       MESHB.  (INPUT)
C                 NXL = NUMBER OF GRIDPOINTS IN THE XI (LEFT TO RIGHT)
C                       DIRECTION.  (INPUT)
C                 NYL = NUMBER OF GRIDPOINTS IN THE YJ (BOTTOM TO TOP)
C                       DIRECTION.  (INPUT)
C               BMESH = MESH LENGTH OF THE CURRENT GRID.  (INPUT)
C              NORUNS = NUMBER OF RUNS OR CYCLES TO INCLUDE IN AN
C                       ANALYSIS, ALL VERIFYING AT THE SAME TIME, 
C                       MAXIMUM OF 5.  (INPUT)
C              LEVELS = THE NUMBER OF PROBABILITY LEVELS TO ANALYZE.
C                       (INPUT)
C              MGUESS = THE TYPE OF FIRST GUESS ACTUALLY USED (SEE
C                       (IGUESS( )).  SET IN FSTGS5.  (INPUT)
C              IBACKN = NUMBER OF 6-H CYCLES TO LOOK BACK FOR FIRST
C                       GUESS WHEN MGUESS = 2.  IBACKN = 1 MEANS 
C                       CURRENT (MOST RECENT) CYCLE PLUS THE ONE
C                       6 HOURS BEFORE).  NORMALLY, THIS IS 0 FOR
C                       DEVELOPMENT; MAY BE OTHERWISE FOR OPERATIONS.
C                       (INPUT)
C              IBACKL = NUMBER OF 6-H CYCLES TO LOOK BACK FOR FIRST
C                       GUESS WHEN MGUESS = 3.  IBACKN = 1 MEANS 
C                       CURRENT (MOST RECENT) CYCLE PLUS THE ONE
C                       6 HOURS BEFORE).  NORMALLY, THIS IS 0 FOR
C                       DEVELOPMENT; MAY BE OTHERWISE FOR OPERATIONS.
C                       (INPUT)
C         LSTORE(L,J) = THE ARRAY HOLDING INFORMATION ABOUT THE DATA 
C                       STORED (L=1,12) (J=1,LITEMS).  (INPUT)
C                 ND9 = MAXIMUM NUMBER OF FIELDS STORED IN LSTORE( , ).
C                       SECOND DIMENSION OF LSTORE( , ).  (INPUT)
C              LITEMS = THE NUMBER OF ITEMS J IN LSTORE( ,L).  
C                       (INPUT)
C               NDATE = THE DATE/TIME OF THE RUN.  (INPUT)
C              IS0(J) = MOS-2000 GRIB SECTION 0 ID'S (J=1,4).
C              IS1(J) = MOS-2000 GRIB SECTION 1 ID'S (J=1,21+).
C              IS2(J) = MOS-2000 GRIB SECTION 2 ID'S (J=1,12).
C              IS4(J) = MOS-2000 GRIB SECTION 4 ID'S (J=1,4).
C                 ND7 = DIMENSION OF IS0( ), IS1( ), IS2( ), AND IS4( ).
C                       (INPUT)
C            IPACK(J) = WORK ARRAY FOR GFETCH (J=1,ND5).  (INTERNAL)
C            IWORK(J) = WORK ARRAY FOR GFETCH (J=1,ND5).  (INTERNAL)
C             DATA(J) = WORK ARRAY FOR GFETCH (J=1,ND5).  (INTERNAL)
C                 ND5 = DIMENSION OF IPACK( ), WORK( ), AND DATA( ).
C                       (INPUT)
C             CORE(J) = SPACE ALLOCATED FOR SAVING PACKED GRIDPOINT 
C                       FIELDS (J=1,ND10).  WHEN THIS SPACE IS 
C                       EXHAUSTED, SCRATCH DISK WILL BE USED.  THIS IS 
C                       THE SPACE USED FOR THE MOS-2000 INTERNAL RANDOM 
C                       ACCESS SYSTEM.  (INPUT)
C                ND10 = THE MEMORY IN WORDS ALLOCATED TO THE SAVING OF 
C                       DATA CORE( ).  WHEN THIS SPACE IS EXHAUSTED,
C                       SCRATCH DISK WILL BE USED.  (INPUT)
C              NBLOCK = BLOCK SIZE IN WORDS OF INTERNAL MOS-2000 DISK
C                       STORAGE.  (INPUT)
C              NFETCH = INCREMENTED EACH TIME DATA ARE FETCHED BY
C                       GFETCH.  IT IS A RUNNING COUNT FROM THE
C                       BEGINNING OF THE PROGRAM.  THIS COUNT 
C                       IS MAINTAINED IN CASE THE USER NEEDS IT
C                       (DIAGNOSTICS, ETC.).  (OUTPUT)
C              MISTOT = RUNNING TOTAL OF RETRIEVED GRIDS WITH ONE OR
C                       MORE MISSING VALUES.  (INPUT/OUTPUT)
C               NSLAB = SLAB OF THE GRID CHARACTERISTICS.  RETURNED
C                       BY GFETCH.  USED FOR CHECKING FOR EQUAL
C                       CHARACTERISTICS OF GRIDS READ.  (INTERNAL)
C               NPROJ = NUMBER OF MAP PROJECTION TO WHICH THIS GRID
C                       APPLIES.
C                       3 = LAMBERT.
C                       5 = POLAR STEREOGRAPHIC.
C                       7 = MERCATOR.
C                       (INPUT)
C              ORIENT = ORIENTATION OF GRID IN WEST LONGITUDE.  (INPUT)
C                XLAT = NORTH LATITUDE AT WHICH GRIDLENGTH IS SPECIFIED
C                       IN DEGREES.  (INPUT)
C              L3264B = INTEGER WORD LENGTH IN BITS OF MACHINE BEING
C                       USED (EITHER 32 OR 64).  (INPUT)
C            ISTOP(J) = ISTOP(1)--IS INCREMENTED BY 1 EACH TIME AN ERROR 
C                                 OCCURS.
C                       ISTOP(3)--IS INCREMENTED WHEN A DATA RECORD 
C                                 COULD NOT BE FOUND.
C                       (INPUT/OUTPUT)
C                 IER = STATUS RETURN.
C                         0 = GOOD RETURN.
C                       103 = VARIABLE NOT ACCOMMODATED.
C                       777 = FATAL ERROR.
C                       (OUTPUT)
C              NRESET = THE NUMBER OF COMPUTED LAPSE RATES DEEMED OUT
C                       OF REASONABLE RANGE AND SET TO ZERO.
C                       (INTERNAL)
C              XAXLAP = THE MAXIMUM COMPUTED LAPSE RATE.  (INTERNAL)
C              XINLAP = THE MINIMUM COMPUTED LAPSE RATE.  (INTERNAL)
C              KMINUS = NUMBER OF MINUS LAPSE RATES. (INTERNAL)
C               KZERO = NUMBER OF ZERO LAPSE RATES. (INTERNAL)
C               KPLUS = NUMBER OF PLUS LAPSE RATES. (INTERNAL)
C              HMINUS = THE LARGEST MINUS LAPSE RATE TOLERATED.
C                       IF EXCEEDED, XLAPSE( ) SET TO 0.  (INTERNAL)
C               HPLUS = THE LARGEST PLUS LAPSE RATE TOLERATED.
C                       IF EXCEEDED, XLAPSE( ) SET TO 0.  (INTERNAL)
C         ITABLE(J,M) = CORRESPONDENCE TABLE BETWEEN ANALYSIS ID AND
C                       THE DATA TO ACCESS ACCESS;
C                       J=1--CCCFFFB00 OF THE VARIABLE BEING ANALYZED
C                       J=2--2ND ID WORD OF THE VARIABLE BEING ANALYZED
C                       J=3--CCCFFF000 OF THE UPPER FIELD TO ACCESS FOR
C                            THE VARIABLE BEING ANALYZED.
C                       (M=1,NDIM)  (INTERNAL)
C                NDIM = THE NUMBER OF VARIABLES FOR WHICH THE LAPSE
C                       CAN BE CALCULATED.  SET BY PARAMETER.
C                       (INTERNAL)
C                JDIM = NUMBER OF LEVELS OF DATA NEEDED.  SET BY
C                       PARAMETER.  (INTERNAL)
C           JTABLE(M) = THE LEVELS OF UPPER AIR DATA THAT CAN
C                       BE ACCESSED FOR COMPUTING THE LAPSE RATE
C                       (M=1,JDIM).  (INTERNAL)
C           AVXDAT(K) = THE AVERAGE OF THE CYCLES IN XDATA(K,M,1), 
C                       (K=1,NSTA), M=2,LEVELS+1).  (AUTOMATIC)
C                       (INTERNAL)
C               JDATE = NDATE UPDATED IN CASE OF BACKUP CYCLES.
C                       (INTERNAL)
C        VDATA(K,M,J) = THE DATA VALUES OF THE VARIABLE FOR WHICH
C                       THE LASPSE IS BEING COMPUTED FOR EACH 
C                       STATION (K=1,NSTA), EACH LEVEL  (J=1,JDIM),
C                       AND EACH OF THREE VARIABLES (M=1,3).
C                       M=1 IS USED FOR ALL EXCEPT THE V WIND, WHICH
C                       IS IN M=2, AND THE SPEED OR GUSTS, WHICH IS
C                       IN M=3.  (INTERNAL) (ALLOCATED) (SAVED)
C           IDVSAV(M) = THE ID OF THE DATA IN VDATA( ,M, ), THE
C                       THIRD WORD IN ITABLE( , ).  (INTERNAL)
C                       (SAVED)
C          HDATA(K,J) = THE HEIGHTS OF THE VARIABLE FOR WHICH
C                       THE LASPSE IS BEING COMPUTED CORRESPONDING TO
C                       VDATA(K, ,J) (K=1,NSTA) (J=1,JDIM).  (INTERNAL)
C                       (ALLOCATED) (SAVED)
C            XSAVE(K) = SAVED LAPSE RATES IN XLAPSE( ) IN CASE THEY
C                       CAN BE REUSED.  (INTERNAL)  (ALLOCATED)
C                       (SAVED)
C              IFIRST = CONTROLS PRINTING TO IP14.  (INTERNAL)
C              JFIRST = CONTROLS ALLOCATION AND PRINTING.  (INTERNAL)
C                       (SAVED)
C            IDSAV(M) = THE ID INFORMATION ASSOCIATED WITH THE DATA IN
C                       VDATA( ,M, ) (M=1,3).  (INTERNAL)  (SAVED)
C           NDATSV(M) = THE DATE ASSOCIATED WITH THE DATA IN
C                       VDATA( ,M, ) (M=1,3).  (INTERNAL)  (SAVED)
C           NTAUSV(M) = THE PROJECTION ASSOCIATED WITH THE DATA IN
C                       VDATA( ,M, ) (M=1,3).  (INTERNAL)  (SAVED)
C              IDPS12 = SAVES IDPARS(12).  UPPER AIR DATA ARE NOT
C                       AVAILABLE IN OUR ARCHIVE (WHAT'S USED FOR LAPSE
C                       COMPUTATION) AT 198 HOURS, SO THE LAPSE FOR
C                       MAX TEMP AT 198 HOURS CAN'T BE CALCULATED.
C                       AN UPPER AIR FORECAST FOR 192 HOURS IS TRIED
C                       FOR THE SAME DATE.  (INTERNAL)
C               LAPSV = SAVES THE TYPE OF LAPSE RATE SAVED IN XSAVE( ).
C                       WHEN IT IS 2, THE LAPSE WAS CALCULATED FROM
C                       ONLY UPPER AIR DATA AND COULD BE REUSED.  WHEN
C                       IT IS 3, IT CANNOT BE USED BECAUSE SURFACE DATA
C                       OF THE VARIABLE BEING ANALYZED IS USED.  IF
C                       THE SAVED LAPSE( ) IS MISSING (=0),
C                       LAPSV = 9999.  (INTERNAL)  (SAVED)
C               SV174 = THE FILE NAME OF THE FILE PREPARED BY U174 USED
C                       FOR THE LAPSE SAVED IN XDAVE( ).
C                       (CHARACTER*60)  (INTERNAL)  (SAVED)
C        1         2         3         4         5         6         7 X
C        NONSYSTEM SUBROUTINES USED 
C            INTRPX, TIMPR, UPDAT, GFETCH
C
      PARAMETER (NDIM=8)
      PARAMETER (JDIM=12)
C
      CHARACTER*8 CCALL(ND1)
      CHARACTER*20 NAME(ND1)
      CHARACTER*60 FL174,SV174
C
      DIMENSION ID(4),IDPARS(15)
      DIMENSION LNDSEA(NSTA),ELEV(NSTA),
     1          XLAPSE(NSTA),XPL(NSTA),YPL(NSTA),
     2          ELEVHI(NSTA),ELEVLO(NSTA)
      DIMENSION AVXDAT(NSTA)
C        AVXDAT( ) IS AN AUTOMATIC ARRAY.
      DIMENSION XDATA(ND1,NORUNS+1,LEVELS)
      DIMENSION DIR(ND1,2,ND11),NGRIDC(6,ND11)
      DIMENSION IPACK(ND5),IWORK(ND5),DATA(ND5)
      DIMENSION IS0(ND7),IS1(ND7),IS2(ND7),IS4(ND7)
      DIMENSION LSTORE(12,ND9)
      DIMENSION CORE(ND10)
      DIMENSION ISTOP(6),LD(4)
      DIMENSION ITABLE(3,NDIM),JTABLE(JDIM)
      DIMENSION IDSAV(3),NDATSV(3),NTAUSV(3),IDVSAV(3)
C        THE ABOVE ARE SAVED ARRAYS.
C
      ALLOCATABLE VDATA(:,:,:),HDATA(:,:),XSAVE(:)
      SAVE VDATA,HDATA,XSAVE,JFIRST,IDSAV,NTAUSV,NDATSV,LAPSV,IDVSAV
C
      DATA IFIRST/0/
      DATA JFIRST/0/
      DATA HMINUS/-.1/,
     1     HPLUS/+.1/
      DATA IDSAV /0,0,0/,
     1     NDATSV/0,0,0/,
     2     NTAUSV/0,0,0/,
     3     IDVSAV/0,0,0/
      DATA SV174/' '/
      DATA ITABLE/222020000,000000000,002000000,
     1            223020000,000000000,002000000,
     2            222120000,000000000,002000000,   
     3            222220000,000000000,002000000,
     4            224360000,000000000,004210000,
     5            224060000,000000000,004000000,
     6            224160000,000000000,004100000,
     7            224385000,000000000,004210000/
C        THE ABOVE ARE IN ORDER:
C           HOURLY TEMPERATURE,
C           HOURLY DEW POINT,     TEMPERATURE IS USED FOR DEW POINT
C           MAX TEMPERATURE,      TEMPERATURE IS USED FOR MAX TEMP
C           MIN TEMPERATURE,      TEMPERATURE IS USED FOR MIN TEMP
C           WIND SPEED,           U AND V WILL BE USED TO COMPUTE SPEED
C                                 THE 004210000 IS NOT ACTUALLY USED.
C           U-WIND,
C           V-WIND.
C           WIND GUST (ACTUALLY, TOTAL WIND) LAPSE SAME AS FOR SPEED
C                                 THE 004210000 IS NOT ACTUALLY USED.
C*********************************************************************
C        NOTE THAT THE UNITS CONVERSIONS ARE KEYED TO THE ORDER ABOVE
C        AT DO 135 AND DO 136.  OTHER DECISIONS ARE ALSO BASED ON 
C        ORDER.  MAKE ADDITIONS AT END.
C*********************************************************************
      DATA JTABLE/   2,
     1            1000,
     2             975,
     3             950,
     4             925,
     5             900,
     6             850,
     7             800,
     8             750,
     9             700,
     A             600,
     B             500/
C
      PRINT*,"AT BEGINNING OF LAPSUA"
      PRINT*,"ND5 IS ",ND5
      PRINT*,"ND7 IS ",ND7
C
D     CALL TIMPR(KFILDO,KFILDO,'START LAPSUA        ')
      IER=0
C
C        SAVE IDPARS(12).
C
      IDPS12=IDPARS(12)
C        THIS IS FOR RECYCLING TO USE UPPER AIR DATA FOR A PROJECTION
C        6-H EARLIER PRIMARILY FOR THE 198-H MAX TEMP PROBLEM.
C
D     WRITE(KFILDO,101)NDATE,ND5,ND7,ND10,ND9,ND1,NSTA,
D    1                 NPROJ,ORIENT,XLAT,BMESH,L3264B
D101  FORMAT(/,' AT 101 IN LAPSUA--',
D    1         'NDATE,ND5,ND7,ND10,ND9,ND1,NSTA,',
D    2         'NPROJ,ORIENT,XLAT,L3264B',/,
D    3         I12,7I8,2F10.4,F10.6,I4)
C
CCCD     WRITE(KFILDO,1010)(K,CCALL(K),NAME(K),ELEV(K),
CCCD    1                  ELEVHI(K),ELEVLO(K),XPL(K),YPL(K),LNDSEA(K),
CCCD    2                  K=1,NSTA)
CCCD1010 FORMAT(/' AT 1010--K,CCALL(K),NAME(K),ELEV(K),',
CCCD    1        'ELEVHI(K),ELEVLO(K),XPL(K),YPL(K),LNDSEA(K)',/,
CCCD    2        (I6,2X,A8,2X,A20,5F8.2,I5))
C
C        ALLOCATE ARRAYS.  THIS SHOULD BE DONE ONLY ONCE, AND SAVED.
C
      IF(JFIRST.EQ.0)THEN
         ALLOCATE (VDATA(NSTA,3,JDIM),HDATA(NSTA,JDIM),XSAVE(NSTA),
     1             STAT=IOS)
C
         IF(IOS.EQ.1)THEN
C
            IF(JFIRST.EQ.0)THEN
               WRITE(KFILDO,103)
 103           FORMAT(/' ****ALLOCATION OF XSAVE( ), VDATA( , , ) OR',
     1                 ' HDATA( , ) FAILED IN LAPSUA AT 103.',
     2                 '  ARRAY ALREADY ALLOCATED.')
C                 IT IS EXPECTED THE ARRAYS WILL ALREADY BE ALLOCATED
C                 EXCEPT ON FIRST ENTRY.
               ISTOP(1)=ISTOP(1)+1
               IER=777
               GO TO 250
            ENDIF
C
         ELSEIF(IOS.EQ.2)THEN
            WRITE(KFILDO,104)
 104        FORMAT(/' ****ALLOCATION OF XSAVE( ), VDATA( , , ) OR',
     1              ' HDATA( , ) FAILED IN LAPSUA AT 104.',
     2              '  ARRAY NOT ALLOCATED.')
            ISTOP(1)=ISTOP(1)+1
            IER=777
            GO TO 250
         ENDIF
C
         JFIRST=1
C           JFIRST = 1 SIGNIFIES ALLOCATION HAS BEEN SUCCESSFUL.
C           IT SHOULD NOT BE DONE AGAIN ON THIS RUN.
      ENDIF
C
C        DETERMINE WHETHER THIS VARIABLE IS ACCOMMODATED.
C
      DO 105 L=1,NDIM
C
      IF(ID(1)/100.EQ.ITABLE(1,L)/100.AND.
     1   ID(2).EQ.ITABLE(2,L))GO TO 108
C        THIS DEFINES L.  THE DD IS NOT CHECKED.
C
 105  CONTINUE
C
C        DROP THROUGH HERE MEANS THE ID WAS NOT FOUND.
C
      ISTOP(1)=ISTOP(1)+1
      IER=103
      WRITE(KFILDO,107)(ID(J),J=1,4),IER
 107  FORMAT(/' ****VARIABLE ',I9.9,I10.9,I10.9,I4.3,' NOT',
     1        ' ACCOMMODATED IN SUBROUTINE LAPSUA.  IER =',I3)
      GO TO 250
C   
C        SET N2, THE SECOND DIMENSION OF VDATA( , , ).
C        N2 = 2 PERTAINS ONLY TO V-WIND.
C        N2 = 3 PERTAINS ONLY TO WIND SPEED OR GUSTS.
C        N2 = 1 PERTAINS TO EVERYTHING ELSE.
C
 108  IF(L.EQ.5.OR.L.EQ.8)THEN
         N2=3
      ELSEIF(L.EQ.7)THEN
         N2=2
      ELSE
         N2=1
      ENDIF
C
D     WRITE(KFILDO,1085)NDATE,(NDATSV(J),J=1,3),
D    1                  ID(1),(IDSAV(J),J=1,3),
D    2                  IDPARS(12),(NTAUSV(J),J=1,3),
D    3                  N2,(IDVSAV(J),J=1,3),
D    4                  LAPSV
D1085 FORMAT(/' AT 1085--NDATE,(NDATSV(J),J=1,3),',
D    1        'ID(1),(IDSAV(J),J=1,3),',
D    2        'IDPARS(12),NTAUSV(J),J=1,3)',
D    3        'N2,(IDVSAV(J),J=1,3),LAPSV'/,  
D    4        (4I12))
C
C        DETERMINE WHETHER THE SAVED LAPSE IN XSAVE( ) CAN BE REUSED.
C
      IF(LAPFG.EQ.2.AND.LAPSV.EQ.2.AND.FL174.EQ.SV174)THEN
C           ONLY WHEN THE TYPE OF LAPSE NEEDED AND SAVED ARE BOTH 2
C           CAN THE SAVED LAPSE IN XSAVE( ) POSSIBLY BE USED.  ALSO
C           THE U174 FILES BETTER BE THE SAME, OR A DIFFERENT STATIONS
C           MAY BE INVOLVED.
         IF(NDATSV(N2).EQ.NDATE.AND.
     1      NTAUSV(N2).EQ.IDPARS(12).AND.
     2      IDVSAV(N2).EQ.ITABLE(3,L)+IDPARS(4))THEN
C
            DO 110 K=1,NSTA
            XLAPSE(K)=XSAVE(K)
 110        CONTINUE
C
            WRITE(KFILDO,112)(ID(JJ),JJ=1,4)
 112        FORMAT(/' SAVED LAPSE BEING USED FOR VARIABLE  ',
     1              I9.9,I10.9,I10.9,I4.3)
            GO TO 250
C
         ENDIF
C
      ENDIF
C        THE LAPSE NEEDED IS NOT OF TYPE LAPFT = 2 OR THE LAPSE SAVED IN
C        XSAVE( ) WAS NOT OF THE TYPE 2.  SO, COMPUTE IT.
C
      KZERO=0
      KMINUS=0
      KPLUS=0
C
      NRESET=0
C        NRESET COUNTS THE NUMBER OF COMPUTED LAPSE RATES
C        DEEMED OUT OF REASONABLE RANGE AND SET TO ZERO.
      XAXLAP=0.
C        XAXLAP IS THE MAXIMUM POSITIVE COMPUTED LAPSE RATE.
      XINLAP=0.
C        XINLAP IS THE MINIMUM NEGATIVE COMPUTED LAPSE RATE.
C
C        CYCLE OVER IBACKN CYCLES IF PRIMARY FIRST GUESS IS USED
C        OR IBACKL IF THE SECONDARY IS USED.
C
      IF(MGUESS.EQ.2)THEN
         IBACK=IBACKN
      ELSEIF(MGUESS.EQ.3) THEN
         IBACK=IBACKL
      ELSE
         WRITE(KFILDO,125)MGUESS  
 125     FORMAT(/,' ****MGUESS =',I4,' IS UNEXPECTED IN LAPSUA.',
     1            '  ASSUME NO BACKUP.')
         ISTOP=ISTOP+1
         IBACK=0
      ENDIF
C
      DO 230 KCYCLE=0,IBACK
C        IBACK CAN EQUAL 0.
C
C        READ UPPER AIR DATA AND COMPUTE VALUE OF ELEMENT AND,
C        IF NEEDED, ITS HEIGHT AT EACH STATION.  THE ELEVATIONS FOR
C        WHICH DATA ARE AVAILABLE ARE IN JTABLE EXCEPT FOR LEVEL 1.
C
      DO 150 J=1,JDIM
C
C        LOOP OVER LEVELS
C        
C        SEE WHETHER SPEED CAN BE CALCULATED.
C
D     WRITE(KFILDO,126)ID(1),IDVSAV(1),IDVSAV(2),
D    1                       NDATSV(1),NDATSV(2),
D    2                       NTAUSV(1),NTAUSV(2)
D126  FORMAT(/' AT 126 IN LAPSUA--ID(1)',
D    1    'IDSAV(1),IDSAV(2),NDATSV(1),NDATSV(2),NTAUSV(1),NTARSV(2)',
D    2     /,7I11)           
C
      IF(ID(1).EQ.ITABLE(1,5)+IDPARS(4).OR.
     1   ID(1).EQ.ITABLE(1,8)+IDPARS(4))THEN
C           THIS IS SPEED OR GUSTS.
C
         IF(IDVSAV(1).EQ.ITABLE(3,6)+IDPARS(4).AND.
     1      NDATSV(1).EQ.NDATE.AND.NTAUSV(1).EQ.IDPARS(12).AND.
     2      IDVSAV(2).EQ.ITABLE(3,7)+IDPARS(4).AND.
     3      NDATSV(2).EQ.NDATE.AND.NTAUSV(2).EQ.IDPARS(12))THEN
C              THE U- AND V-COMPONENTS EXIST FROM PREVIOUS ENTRIES,
C              SO THE SPEED CAN BE COMPUTED IN VDATA( ,3, ).  THE
C              FULL CCCFFFBDD IS SAVED IN IDSAV( ).  THE WINDS
C              HAVE ALREADY BEEN CONVERTED TO KTS.
            N2=3
C
            DO 127 K=1,NSTA
            VDATA(K,N2,J)= SQRT(VDATA(K,1,J)**2+VDATA(K,2,J)**2)        
 127        CONTINUE
C
            IF(J.EQ.1)WRITE(KFILDO,1275)
 1275       FORMAT(/' SPEED BEING COMPUTED FROM U AND V COMPONENTS.')
C
            GO TO 150
         ELSE
            WRITE(KFILDO,128)(ID(JJ),JJ=1,4)
 128        FORMAT(/' ****U- AND V-WIND MUST BE ANALYZED BEFORE',
     1              ' SPEED OR GUSTS.  ABORT ANALYSIS.  ',
     2               I9.9,I10.9,I10.9,I4.3)
            ISTOP(1)=ISTOP(1)+1
            IER=777
            GO TO 250
         ENDIF
C
      ENDIF 
C
C        READ THE ELEMENT VALUES FOR EACH LEVEL.
C        FORM THE ELEMENT ID IN LD( ).
C   
      LD(1)=ITABLE(3,L)+IDPARS(4)
C
C        READ THE HEIGHTS IF NECESSARY.  THIS ASSUMES THAT IF
C        ANY ANALYSIS HAS BEEN MADE FOR THIS PROJECTION, THE HEIGHTS
C        EXIST.
C
D     WRITE(KFILDO,1285)(NDATSV(JJ),JJ=1,3),(NTAUSV(JJ),JJ=1,3),
D    1                  (IDVSAV(JJ),JJ=1,3),(ID(JJ),JJ=1,3),
D    2                  ITABLE(3,L),NDATE,IDPARS(12)
D1285 FORMAT(/' AT 1285--(NDATSV(JJ),JJ=1,3),(NTAUSV(JJ),JJ=1,3),',
D    1        '(IDVSAV(JJ),JJ-1,3),(ID(JJ),JJ=1,3)',
D    2        'ITABLE(3,L),NDATE,IDPARS(12)',/,
D    3         (3I12))
C
D     WRITE(KFILDO,1286)N2,IDVSAV(N2),L,ITABLE(3,L)
D1286 FORMAT(/' AT 1286--N2,IDVSAV(N2),L,ITABLE(3,L)',4I12)
C
      IF((NDATSV(1).EQ.NDATE.AND.
     1    NTAUSV(1).EQ.IDPARS(12)).OR.
     2   (NDATSV(2).EQ.NDATE.AND.
     3    NTAUSV(2).EQ.IDPARS(12)))THEN
C
         IF(IDVSAV(N2).EQ.ITABLE(3,L))THEN
C
            IF(J.GT.1)GO TO 151
C              LOOP HAS BEEN EXECUTED ONCE WITH DIAGNOSTICS.  IF DATA
C              ARE AVAILABLE, HEIGHTS ARE ALSO.  EXIT LOOP.
C
            WRITE(KFILDO,129)(ID(JJJ),JJJ=1,4)
 129        FORMAT(/' UPPER AIR DATA ALREADY EXIST WHEN PROCESSING    ',
     1               4I11)
            GO TO 1362
         ENDIF
C
      ENDIF
C
C        THE LOWEST LEVEL OF TEMPERATURE AND WIND HAVE THE HEIGHT
C        IN METERS IN THE 2ND WORD AND A DIFFERENT FFF.  THE OTHER
C        LEVELS HAVE THE HEIGHT IN MB GIVEN IN JTABLE( ) AND THE
C        CCCFFFB IN ITABLE(3, ).  ONLY FOR THE 1ST LEVEL IS THE
C        CCCFFFB AND 2ND WORD DIFFERENT FOR DIFFERENT WEATHER
C        ELEMENTS.
C
      IF(J.EQ.1)THEN
C
         IF(L.LE.4)THEN
            LD(1)=LD(1)+1000
C              THE 2-M TEMPERATURE HAS A FFF = 001.
            LD(2)=2
         ELSE
            LD(1)=LD(1)+20000
C              THE 10-M WIND HAS FFF = ^20.
            LD(2)=10
         ENDIF
C
      ELSE
         LD(2)=JTABLE(J)
      ENDIF
C
      LD(3)=(ID(3)/1000)*1000+IDPARS(12)+KCYCLE*6
      LD(4)=ID(4)
      CALL UPDAT(NDATE,-(KCYCLE*6),JDATE)
C        NOTE THE SAME TAU IS USED FOR UPPER AIR DATA AS FOR
C        THE DATA BEING ANALYZED, EVEN MAX AND MIN.
C
      CALL GFETCH(KFILDO,KFIL10,LD,7777,LSTORE,ND9,LITEMS,
     1            IS0,IS1,IS2,IS4,ND7,IPACK,IWORK,DATA,ND5,
     2            NWORDS,NPACK,JDATE,NTIMES,CORE,ND10,
     3            NBLOCK,NFETCH,NSLAB,MISSP,MISSS,L3264B,1,IER)
      IF(MISSP.NE.0)MISTOT=MISTOT+1
C
      IF(IER.NE.0)THEN
         LD(4)=ID(4)+200
C           THE 200 IS AN ARTIFACT OF THE DATA BEING INTERPOLATED
C           IN U201 TO GET THESE STATION VALUES.  SOME TEST
C           DATA HAS THE 200, SOME DO NOT.
         CALL GFETCH(KFILDO,KFIL10,LD,7777,LSTORE,ND9,LITEMS,
     1               IS0,IS1,IS2,IS4,ND7,IPACK,IWORK,DATA,ND5,
     2               NWORDS,NPACK,JDATE,NTIMES,CORE,ND10,
     3               NBLOCK,NFETCH,NSLAB,MISSP,MISSS,L3264B,1,IER)
         IF(MISSP.NE.0)MISTOT=MISTOT+1
C
C           IF THIS GRID COULD NOT BE OBTAINED OR THE GRID
C           CHARACTERISTICS WERE NOT WHAT WAS EXPECTED, COUNT
C           IT AS A GRID THAT COULD NOT BE OBTAINED BY
C           INCREMENTING ISTOP(3).
C
         IF(IER.NE.0)THEN
            ISTOP(3)=ISTOP(3)+1
            IER=0
C              IER IS SET = 0 SO IT WON'T BE NON ZERO ON RETURN.
            GO TO 220
            
         ENDIF
C
      ENDIF
C
C        THIS GRID MAY NOT HAVE THE SAME CHARACTERISTICS AS
C        THE ANALYSIS GRID, BUT THEY ARE CONTAINED IN
C        NGRIDC( ,NSLAB).  CHECK TO MAKE SURE THE DEFINITION
C        IN IS2( ) MATCHES NGRIDC( ,NSLAB).  THIS IS A SAFETY.
C
      IF(NGRIDC(1,NSLAB).NE.IS2(2).OR.
     1   NGRIDC(2,NSLAB).NE.IS2(8).OR.
     2   NGRIDC(3,NSLAB).NE.IS2(9).OR.
     3   NGRIDC(4,NSLAB).NE.IS2(7).OR.
     4   NGRIDC(5,NSLAB).NE.IS2(5).OR.
     5   NGRIDC(6,NSLAB).NE.IS2(6))THEN
         WRITE(KFILDO,130)NSLAB,NGRIDC(1,NSLAB),IS2(2),
     1                          NGRIDC(2,NSLAB),IS2(8),
     2                          NGRIDC(3,NSLAB),IS2(9),
     3                          NGRIDC(4,NSLAB),IS2(7),
     4                          NGRIDC(5,NSLAB),IS2(5),
     5                          NGRIDC(6,NSLAB),IS2(6)
 130     FORMAT(/,' ****GRID CHARACTERISTICS IN NGRIDC( , ) DO NOT',
     1            ' MATCH THOSE IN IS2( ) FOR NSLAB = ',I3,'.',/,
     2            'NGRIDC(1,NSLAB) =',I8,'    IS2(2) =',I8,
     3            'NGRIDC(2,NSLAB) =',I8,'    IS2(8) =',I8,
     4            'NGRIDC(3,NSLAB) =',I8,'    IS2(9) =',I8,
     5            'NGRIDC(4,NSLAB) =',I8,'    IS2(7) =',I8,
     6            'NGRIDC(5,NSLAB) =',I8,'    IS2(5) =',I8,
     7            'NGRIDC(6,NSLAB) =',I8,'    IS2(6) =',I8)
         ISTOP(3)=ISTOP(3)+1
         GO TO 220
      ELSE
D        WRITE(KFILDO,131)NSLAB
D131     FORMAT(' GRID RETRIEVED IN LAPSUA WITH NSLAB =',I3)
      ENDIF
C
CCCD     DO 134 K=1,NSTA
CCCD     WRITE(KFILDO,132)K,CCALL(K),((DIR(K,LL,M),LL=1,2),M=1,3)
CCCD132  FORMAT(/,' K,CCALL(K),((DIR(K,LL,M),LL=1,2),M=1,3)',
CCCD    1        (' ',I5,2X,A8,6F10.2))
CCCD134  CONTINUE
C
C        INTERPOLATE TO EACH STATION.
C
      CALL INTRPX(KFILDO,DATA,IS2(3),IS2(4),
     1            DIR(1,1,NSLAB),ND1,NSTA,VDATA(1,N2,J))
C        NOTE THAT INTERPOLATION IS TO ALL STATIONS, NOT JUST THE
C        ONES WITH DATA TO ANALYZE.  THE CHARACTERISTS OF THE GRID
C        READ IS FURNISHED, NOT NECESSARILY THE ANALYSIS GRID.
C 
C        CONVERT UNITS AS APPROPRIATE.
C
      IF(L.LE.4)THEN
C           NOTE THAT L DEPENDS ON THE ORDER OF VARIABLES IN
C           ITABLE( , ).  THE FIRST 4 ARE TEMPERATURE.
C
C           BELOW FOR KELVIN TO FAHRENHEIT.
C
         DO 135 K=1,NSTA
            IF(NINT(VDATA(K,N2,J)).EQ.9999)GO TO 135
            VDATA(K,N2,J) =(VDATA(K,N2,J)-273.15)*1.8+32.  
 135     CONTINUE
C
      ELSEIF(L.LE.8)THEN
C
C           BELOW FOR M/S TO KTS.
C
         DO 136 K=1,NSTA
            IF(NINT(VDATA(K,N2,J)).EQ.9999)GO TO 136
            VDATA(K,N2,J) =(VDATA(K,N2,J))*1.9424 
C              CONVERSION CONSTANT TAKEN FROM MPSKTS.
 136     CONTINUE
C
      ENDIF
C
C        READ THE HEIGHTS IF NECESSARY.  THIS ASSUMES THAT IF
C        ANY ANALYSIS HAS BEEN MADE FOR THIS PROJECTION, THE HEIGHTS
C        EXIST.
C
 1362 IF((NDATSV(1).EQ.NDATE.AND.
     1    NTAUSV(1).EQ.IDPARS(12)).OR.
     2   (NDATSV(2).EQ.NDATE.AND.
     3    NTAUSV(2).EQ.IDPARS(12)))THEN
          IF(J.EQ.1)WRITE(KFILDO,1365)(ID(JJJ),JJJ=1,4)
 1365     FORMAT(/' UPPER AIR HEIGHTS ALREADY EXIST WHEN PROCESSING ',
     1            4I11)
         GO TO 150
      ENDIF
C
      IF(J.EQ.1)THEN
C
         IF(L.LE.4)THEN
C           THE FIRST TEMPERATURE LEVEL IS A CONSTANT 2 M.
C
            DO 137 K=1,NSTA
            HDATA(K,J)=2.
 137        CONTINUE
C
         ELSE
C           THE FIRST WIND LEVEL IS A CONSTANT 10 M.
C
            DO 138 K=1,NSTA
            HDATA(K,J)=10.
 138        CONTINUE
C
         ENDIF
C
         GO TO 150
C
      ENDIF
C
      LD(1)=001000000+IDPARS(4)
      CALL GFETCH(KFILDO,KFIL10,LD,7777,LSTORE,ND9,LITEMS,
     1            IS0,IS1,IS2,IS4,ND7,IPACK,IWORK,DATA,ND5,
     2            NWORDS,NPACK,JDATE,NTIMES,CORE,ND10,
     3            NBLOCK,NFETCH,NSLAB,MISSP,MISSS,L3264B,1,IER)
      IF(MISSP.NE.0)MISTOT=MISTOT+1
C
C        IF THIS GRID COULD NOT BE OBTAINED OR THE GRID CHARACTERISTICS
C        WERE NOT WHAT WAS EXPECTED, COUNT IT AS A GRID THAT COULD 
C        NOT BE OBTAINED BY INCREMENTING ISTOP(3).
C
      IF(IER.NE.0)THEN
         ISTOP(3)=ISTOP(3)+1
         IER=0
C           IER IS SET = 0 SO IT WON'T BE NON ZERO ON RETURN.
         GO TO 220
      ENDIF
C
C        THIS GRID MAY NOT HAVE THE SAME CHARACTERISTICS AS
C        THE ANALYSIS GRID, BUT THEY ARE CONTAINED IN
C        NGRIDC( ,NSLAB).  CHECK TO MAKE SURE THE DEFINITION
C        IN IS2( ) MATCHES NGRIDC( ,NSLAB).
C
      IF(NGRIDC(1,NSLAB).NE.IS2(2).OR.
     1   NGRIDC(2,NSLAB).NE.IS2(8).OR.
     2   NGRIDC(3,NSLAB).NE.IS2(9).OR.
     3   NGRIDC(4,NSLAB).NE.IS2(7).OR.
     4   NGRIDC(5,NSLAB).NE.IS2(5).OR.
     5   NGRIDC(6,NSLAB).NE.IS2(6))THEN
         WRITE(KFILDO,140)NSLAB,NGRIDC(1,NSLAB),IS2(2),
     1                          NGRIDC(2,NSLAB),IS2(8),
     2                          NGRIDC(3,NSLAB),IS2(9),
     3                          NGRIDC(4,NSLAB),IS2(7),
     4                          NGRIDC(5,NSLAB),IS2(5),
     5                          NGRIDC(6,NSLAB),IS2(6)
 140     FORMAT(/,' ****GRID CHARACTERISTICS IN NGRIDC( , ) DO NOT',
     1            ' MATCH THOSE IN IS2( ) FOR NSLAB = ',I3,'.',/,
     2            'NGRIDC(1,NSLAB) =',I8,'    IS2(2) =',I8,
     3            'NGRIDC(2,NSLAB) =',I8,'    IS2(8) =',I8,
     4            'NGRIDC(3,NSLAB) =',I8,'    IS2(9) =',I8,
     5            'NGRIDC(4,NSLAB) =',I8,'    IS2(7) =',I8,
     6            'NGRIDC(5,NSLAB) =',I8,'    IS2(5) =',I8,
     7            'NGRIDC(6,NSLAB) =',I8,'    IS2(6) =',I8)
         ISTOP(3)=ISTOP(3)+1
         GO TO 220
      ELSE
D        WRITE(KFILDO,142)NSLAB
D142     FORMAT(' GRID RETRIEVED IN LAPSUA WITH NSLAB =',I3)
      ENDIF
C
C        INTERPOLATE TO EACH STATION.
C
      CALL INTRPX(KFILDO,DATA,IS2(3),IS2(4),
     1            DIR(1,1,NSLAB),ND1,NSTA,HDATA(1,J))
C        NOTE THAT INTERPOLATION IS TO ALL STATIONS, NOT JUST THE
C        ONES WITH DATA TO ANALYZE.  THE CHARACTERISTS OF THE GRID
C        READ IS FURNISHED, NOT NECESSARILY THE ANALYSIS GRID.
C
CCCD     WRITE(KFILDO,143)(LD(N),N=1,4),
CCCD    1                 (N,CCALL(N),VDATA(N,N2,J),HDATA(N,J),N=1,NSTA)
CCCD143  FORMAT(/,' DATA AND HEIGHTS FOR STATIONS FOR VARIABLE ',
CCCD    1        I12.9,I10.9,I9.8,I4.3,/,('  ',I4,2X,A8,2F8.1))

 150  CONTINUE
C
C        AT THIS POINT, WE HAVE THE HEIGHTS IN HDATA( , ) AND
C        VARIABLE VALUES IN VDATA( ,N2, ) FOR EACH STATION.  ALL
C        HEIGHTS ARE IN METERS.  NO USE OF GRIDS BELOW THIS
C        POINT.  SAVE THE GRID CHARACTERISTICS.
C
 151  IDVSAV(N2)=ITABLE(3,L)+IDPARS(4)
C        IDVSAV( ) INDICATES THE DATA IN DVDATA( ,N2, ).
C
      DO 200 K=1,NSTA
C
C        MAKE SURE THE VERTICAL DISTANCE OVER WHICH THE LAPSE IS
C        TO BE COMPUTED IS 130 M OR GREATER.  THIS IS THE MINIMUM
C        USUALLY USED IN U174 TO COMPUTE THE HIGHEST ELEVATION TO
C        BE AFFECTED BY THE STATION, THIS ELEVATION NOW BEING IN
C        ELEVHI( ).  IF NOT, THEN JUST SET XLAPSE( ) = 0.
C
      IF(ELEVHI(K)-ELEV(K).LT.130.)THEN
         XLAPSE(K)=0.
         GO TO 200
      ENDIF
C
C        FIND SUM OF DATA IN XDATA(K, ,1).  THIS IS GETTING THE
C        AVERAGE OF SURFACE DATA WHEN MORE THAN ONE CYCLE
C        IS USED, OR IF NOT, JUST SETTING AVXDAT( ) = THE ONE
C        VALUE.  U450A HAS NOT YET AVERAGED THE VALUES.
C        IF LAPFG = 2, THE AVERAGE IS NOT NEEDED, BUT IS COMPUTED
C        ANYWAY.  AVXDAT( ) IS PRINTED IN VARIOUS PLACES WITH 
C        DIAGNOSTIC D.
C
      IF(NORUNS.GT.1)THEN
         AVXDAT(K)=0.
         NC=0
C
         DO 1525 M=1,NORUNS
C
         IF(XDATA(K,M+1,1).LT.9998.9)THEN
            AVXDAT(K)=AVXDAT(K)+XDATA(K,M+1,1)
            NC=NC+1
         ENDIF
C
 1525    CONTINUE
C
C           FIND AVERAGE.  WHEN NC = 1, AVXDAT IS THE VALUE.
C
         IF(NC.GT.0)THEN
            AVXDAT(K)=AVXDAT(K)/NC
C              THERE IS AN OCCASIONAL DIVISION BY 1 WHEN THERE
C              IS ONLY ONE VALUE (AND ALWAYS WHEN ONLY ONE CYCLE
C              IS BEING USED), BUT SAVES A CHECK FOR NC = 1.     
         ELSE
            AVXDAT(K)=9999.
         ENDIF
C
      ELSE
         AVXDAT(K)=XDATA(K,2,1)
      ENDIF
C
C        SET LAPSE FOR WATER POINTS = 9999. FOR NOW.
C
      IF(LNDSEA(K).LT.9)THEN
C
CCCD        WRITE(KFILDO,153)K,CCALL(K)
CCCD153     FORMAT(/' AT 153, WATER STATION--K,CCALL',I4,2X,A8)
C
         XLAPSE(K)=9999.
C           THIS WILL LATER BE SET TO 0.
         GO TO 200
      ENDIF
C
C        CHECK FOR MISSING DATA.  WHEN FOUND SET LAPSE = 9999. FOR NOW.
C
      IF(ELEVHI(K).GT.9998..OR.
     1     ELEV(K).GT.9998..OR.
     2     VDATA(K,N2,1).GT.9998..OR.
     3    (AVXDAT(K).GT.9998..AND.LAPFG.EQ.3))THEN
C           THE LAPSE CANNOT BE COMPUTED WHEN AVXDAT( ) IS MISSING
C           AND LAPFG = 3.  HOWEVER, WHEN LAPFG = 2, AVXDAT( ) IS NOT
C           USED AND NEEDS TO BE COMPUTED AND SAVED.  FOR INSTANCE,
C           IF THE LAPSE COMPUTED IN TEMP IS USED IN MAX TEMP, ALL
C           STATIONS WITH MAX DATA NEED A LAPSE, NOT JUST THE ONES
C           WITH TEMP DATA.
         XLAPSE(K)=9999.
C           THIS WILL LATER BE SET TO 0.
C
CCCD        WRITE(KFILDO,154)K,CCALL(K),ELEVHI(K),ELEV(K),VDATA(K,N2,1),
CCCD    1                    HDATA(K,1),AVXDAT(K)
CCCD154     FORMAT(/,' AT 154 IN LAPSUA--K,CCALL(K),ELEVHI(K),ELEV(K)',
CCCD    1            'VDATA(K,N2,1),HDATA(K,1),AVXDAT(K)',
CCCD    2            I8,2X,A8,F7.0,F7.1,F7.1,F7.1,F6.0)
C
         GO TO 200
      ENDIF 
C
C        THE LAPSE IS COMPUTED ABOVE THE STATION.
C
      HLOW=9999.
      HHIGH=9999.
C
      DO 156 J=1,JDIM
C
D     IF(CCALL(K).EQ.'PAKP   ')THEN
D        WRITE(KFILDO,155)K,CCALL(K),NAME(K),J,HDATA(K,J),ELEV(K),
D    1                    VDATA(K,N2,J),AVXDAT(K)
D155     FORMAT(/' AT 155 IN LAPSUA--K,CCALL(K),NAME(K),J,HDATA(K,J),'
D    1           'ELEV(K),VDATA(K,N2,J),AVXDAT(K)',/,
D    2           I5,2X,A8,2X,A20,I3,4F8.1)
D     ENDIF
C
C        FIND THE LOWEST UA LEVEL ABOVE THE STATION ELEVATION.
C
      IF(HDATA(K,J).GT.ELEV(K))THEN
         HLOW=HDATA(K,J)
         VLOW=VDATA(K,N2,J)
         JLOW=J
         GO TO 157
      ENDIF
C
 156  CONTINUE
C
      WRITE(KFILDO,1565)
 1565 FORMAT(/,' ****ERROR IN LAPSUA AT 1565.',
     1         '  XLAPSE( ) SET TO ZERO.')
      XLAPSE(K)=9999.
C           THIS WILL LATER BE SET TO ZERO.
      ISTOP(1)=ISTOP(1)+1
      GO TO 200
C
C        NOW FIND THE UPPER LEVEL TO CALCULATE THE LAPSE RATE.
C        START ONE LEVEL ABOVE THE LOWEST LEVEL J.
C
 157  DO 158 J=JLOW+1,JDIM
C        IF BY CHANCE JLOW+1 EXCEEDS JDIM, LOOP WILL NOT EXECUTE.
C
D     IF(CCALL(K).EQ.'PAKP   ')THEN
D        WRITE(KFILDO,1575)K,CCALL(K),NAME(K),J,HDATA(K,J),ELEV(K),
D    1                    VDATA(K,N2,J),AVXDAT(K),ELEVHI(K),HHIGH,VHIGH
D1575    FORMAT(/' AT 1575 IN LAPSUA--K,CCALL(K),NAME(K),J,HDATA(K,J),'
D    1           'ELEV(K),VDATA(K,N2,J),AVXDAT(K),ELEVHI(K),HHIGH,VHIGH'
D    1           ,/,I5,2X,A8,2X,A20,I3,7F8.1)
D     ENDIF
C
      IF(HDATA(K,J).GT.ELEVHI(K))THEN
         HHIGH=HDATA(K,J)
         VHIGH=VDATA(K,N2,J)
         GO TO 162
      ELSEIF(J.EQ.JDIM)THEN
C           THE TOP LEVEL (500 MB) HAS BEEN REACHED AND ELEVHI(K)
C           HAS NOT BEEN EXCEEDED.  USE THE 500 MB LEVEL.
         HHIGH=HDATA(K,J)
         VHIGH=VDATA(K,N2,J)
         GO TO 162
      ENDIF
C
 158  CONTINUE
C
      IF(HLOW.EQ.9999..OR.HHIGH.EQ.9999.)THEN
C           THIS SHOULD BE RARE AND PROBABLY MEANS AN ERROR.
C           IF HLOW AND HHIGH ARE GOOD, THEN VLOW AND VHIGH WILL BE.
         WRITE(KFILDO,161)CCALL(K),NAME(K)
 161     FORMAT(/,' ****LAPSE COULD NOT BE COMPUTED FOR STATION  ',
     1             A8,2X,A20,' AT 161 IN LAPSUA.  SET IT TO ZERO.')
         XLAPSE(K)=9999.
C           THIS WILL LATER BE SET TO ZERO.
            ISTOP(1)=ISTOP(1)+1
         GO TO 200
      ENDIF       
C
C        COMPUTE LAPSE.
C
 162  IF(LAPFG.EQ.2)THEN
         XLAPSE(K)=(VHIGH-VLOW)/(HHIGH-HLOW)
      ELSEIF(LAPFG.EQ.3)THEN
         XLAPSE(K)=(VHIGH-AVXDAT(K))/(HHIGH-ELEV(K))
      ELSE
         WRITE(KFILDO,1622)LAPFG
 1622    FORMAT(/' ****LAPSUA ENTERED WITH LAPFG NE 2 OR 3.',
     1           '  LAPSE CANNOT BE COMPUTED.  COUNT AS FATAL.')
         ISTOP(1)=ISTOP(1)+1
         IER=777
C
C           SET XLAPSE( ) = 0. FOR SAFETY AND LAPSV TO INDICATE 
C           NOTHING REUSABLE IS SAVED.
C
         DO 1623 KKK=1,NSTA
         XLAPSE(KKK)=0.
 1623    CONTINUE
C
         GO TO 250
      ENDIF
C
D     WRITE(KFILDO,1624)K,CCALL(K),AVXDAT(K),ELEV(K),
D    1                 (VDATA(K,N2,J),J=1,JDIM),
D    2                 (HDATA(K,J),J=1,JDIM) 
D1624 FORMAT(/' AT 1624--K,CCALL(K),AVXDAT(K),ELEV(K),',
D    1       '(VDATA(K,N2,J),J=1,JDIM),',
D    2       '(HDATA(K,J),J=1,JDIM)',/,
D    3         I6,2X,A8,2F8.1/,(12F9.2))
C        FORMAT ABOVE SET FOR JDIM = 12. 
C    
D     WRITE(KFILDO,1625)K,CCALL(K),AVXDAT(K),ELEV(K),
D    1                  ELEVLO(K),ELEVHI(K),
D    2                  VHIGH,VLOW,HHIGH,HLOW,XLAPSE(K)
D1625 FORMAT(' AT 1625--K,CCALL(K),AVXDAT(K),ELEV(K),',
D    1       'ELEVLO(K),ELEVHI(K),',
D    2       'VHIGH,VLOW,HHIGH,HLOW,XLAPSE(K)',/,
D    3       I6,2X,A8,2F7.1,2F6.0,4F7.1,F8.4)
C
 200  CONTINUE
C
C        CHECK FOR REASONABLENESS OF LAPSE RATES AND COUNT NEGATIVES,
C        POSITIVES, AND ZEROS.
C
      DO 204 K=1,NSTA
C
      IF(XLAPSE(K).NE.9999.)THEN
C
         IF(XLAPSE(K).LT.0.)THEN
            KMINUS=KMINUS+1
C
            IF(XLAPSE(K).LT.HMINUS)THEN
               NRESET=NRESET+1
               XLAPSE(K)=0.      
            ELSEIF(XLAPSE(K).LT.XINLAP)THEN
               XINLAP=XLAPSE(K)
            ENDIF
C
         ELSEIF(XLAPSE(K).GT.0.)THEN
            KPLUS=KPLUS+1
C
            IF(XLAPSE(K).GT.HPLUS)THEN
               NRESET=NRESET+1
               XLAPSE(K)=0.      
            ELSEIF(XLAPSE(K).GT.XAXLAP)THEN
               XAXLAP=XLAPSE(K)
            ENDIF
C
         ELSE
            KZERO=KZERO+1
         ENDIF
C
      ELSE
         XLAPSE(K)=0.
C           THE 9999'S ARE SET TO ZERO.
      ENDIF
C
CCCD     WRITE(KFILDO,203)K,CCALL(K),XLAPSE(K),NRESET,KMINUS,KPLUS,KZERO,
CCCD    1                 XINLAP,XAXLAP,NSTA
CCCD203  FORMAT(' AT 203--K,CCALL(K),XLAPSE(K),NRESET,KMINUS,KPLUS,KZERO,',
CCCD    1       'XINLAP,XAXLAP,NSTA',/,I5,2X,A8,F12.4,4I6,2F12.4,I6)
 204  CONTINUE
C
      WRITE(KFILDO,205)NRESET,HMINUS,HPLUS,
     1                 XAXLAP,XINLAP,
     2                 KMINUS,KZERO,KPLUS
 205  FORMAT(/,    I7,' = NUMBER OF COMPUTED LAPSE RATES OUTSIDE',
     1                ' RANGE',F6.3,' AND,',F5.3,' AND SET TO ZERO',/,
     2           F7.4,' = MAXIMUM POSITIVE LAPSE RATE COMPUTED',/,
     3           F7.4,' = MINIMUM NEGATIVE LAPSE RATE COMPUTED',/,
     4             I7,' = NUMBER OF MINUS LAPSE RATES',/,
     5             I7,' = NUMBER OF ZERO  LAPSE RATES (COMPUTED)',/,
     6             I7,' = NUMBER OF PLUS  LAPSE RATES')
C
      IF(IP14.NE.0.AND.IFIRST.EQ.0.AND.LAPFG.EQ.3)THEN
         IFIRST=1
C           FOR TESTING, WRITE THESE ONLY ONCE.  THIS WILL BE FOR
C           THE FIRST VARIABLE.
         WRITE(IP14,207)
 207     FORMAT(/,' LISTING OF COMPUTED LAPSE RATE.',
     1            '  MISSING STATIONS ARE NOT LISTED'/,/,
     2            ' STATION NO.  CALL LETTERS AND NAME',
     3            '            DATA VALUE  LAPSE (PER METER)',/)
         DO 210 K=1,NSTA
C
         IF(AVXDAT(K).NE.9999.)THEN
            WRITE(IP14,209)K,CCALL(K),NAME(K),AVXDAT(K),XLAPSE(K)
 209        FORMAT(' ',I6,8X,A8,2X,A20,F10.2,F8.3)
         ENDIF
C
 210     CONTINUE
C
      ENDIF
C   
C        SAVE LAPSE RATES FOR POSSIBLE REUSE.  LAPSV INDICATES THE
C        TYPE OF LAPSE SAVED.
C
      DO 215 K=1,NSTA
      XSAVE(K)=XLAPSE(K)
 215  CONTINUE
C     
C        THIS IS THE ONLY GOOD COMPLETION FOR READING VALUES.
C        SET SAVE VALUES.
C
      LAPSV=LAPFG 
      IDSAV(N2)=ID(1)
      NDATSV(N2)=NDATE
      NTAUSV(N2)=IDPARS(12)
      SV174=FL174
C
D     WRITE(KFILDO,217),N2,(IDSAV(M),M=1,3),(NDATSV(M),M=1,3),
D    1                    (NTAUSV(M),M=1,3)
D217  FORMAT(/' LAPSUA AT 217--N2,IDSAV(1-3),NDATSV(1-3),',
D    1        'NTAUSV(1-3),',I2,1X,3I10,3I11,3I3)
C
      GO TO 250
C     
 220  IF(KCYCLE.LT.IBACK)THEN
C
         WRITE(KFILDO,221)(LD(M1),M1=1,4),JDATE
 221     FORMAT(/,' UPPER AIR DATA FOR ',3I10.9,I10.3,' FOR JDATE',I12,
     1            ' NOT AVAILABLE.  TRY A PREVIOUS CYCLE.')
      ENDIF
C
 230     CONTINUE
C
C        DROP THROUGH HERE MEANS DATA WERE NOT RETRIEVED.  TRY A
C        FORECAST FOR 6-H EARLIER PROJECTION.
C
      IF(IDPS12.EQ.IDPARS(12))THEN
         IDPARS(12)=IDPARS(12)-6
         WRITE(KFILDO,242)(ID(M1),M1=1,4)
 242     FORMAT(/,' THE UPPER AIR DATA FOR VARIABLE ',
     1           I9.9,I10.9,I10.9,I4.3,' NOT AVAILABLE.  TRY A',
     2           ' FORECAST FOR 6-H EARLIER PROJECTION.')
         GO TO 108 
      ENDIF
C    
      WRITE(KFILDO,245)(ID(M1),M1=1,4),NDATE
 245  FORMAT(/,' ****COULD NOT FIND UPPER DATA TO USE FOR VARIABLE',
     1         ' ID =',3I10.9,I10.3,' FOR DATE =',I12,' IN LAPSUA.',/,
     2         '     FATAL ERROR.')  
      ISTOP(1)=ISTOP(1)+1
      IER=777
C
 250  IDPARS(12)=IDPS12
C        ALWAYS RESTORES IDPARS(12) IN CASE IT WAS CHANGED.
      RETURN
C
      END



