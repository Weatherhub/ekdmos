      SUBROUTINE OBSPREP(IIN,IOUT,L3264B,L3264W,
     &                  ND1,ND5,ND7,IS0,IS1,IS2,IS4,
     &                  IPACK)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK  ***                             
C                                                                       
C SUBPROGRAM:  OBSPREP
C   PRGMMR: ALLEN        ORG: W/OSD211     DATE: 00-05-15           
C                                                                       
C ABSTRACT: THIS PROGRAM PROCESSES RECENT HOURLY METAR OBSERVATIONS
C   FROM THE SFCTBL.XX FILES AND PUTS THEM INTO A FILE TO BE
C   INPUT TO THE PROGRAM U201.          
C                                                                       
C PROGRAM HISTORY LOG:                                                  
C   00-05-15  ALLEN                               
C   02-08-15  RLC       MADE CHANGE TO CALL TO CNVTWX FOR THE THIRD
C                       CLOUD AMOUNT GROUP.  IT WAS ORIGINALLY CODED
C                       TO SEND IN CA2 INSTEAD OF CA3 FOR THE THIRD
C                       GROUP, SO THE 3RD CLOUD AMOUNT WAS NOT BEING SET
C                       CORRECTLY
C   06-04-25  MALONEY   ADDED PROCESSING FOR WIND GUST (704211)
C   12-12-11  ENGLE     ADDED OPEN STATEMENT FOR OUTPUT TDLPACK FILE.
C                                                                       
C USAGE:    CALL OBSPREP(IIN,IOUT,L3264B,L3264W,ND1,ND5,ND7,IS0,IS1,
C                        IS2,IS4,IPACK)
C   INPUT ARGUMENT LIST:
C               IIN = INPUT READ UNIT NUMBER (5)
C              IOUT = DIAGNOSTIC WRITE UNIT NUMBER (6)
C            L3264B = WORD LENGTH IN BITS OF MACHINE BEING USED.  
C            L3264W = THE NUMBER OF 32-BIT "WORDS" TO CONTAIN 64 BITS.
C                       2 FOR 32-BIT MACHINE, 1 FOR 64-BIT MACHINE.
C               ND5 = THE SIZE OF IPACK( ).  SINCE THE FULL ARRAY
C                       IPACK( ) IS ZEROED ON ENTRY, ND5 SHOULD NOT BE
C                       UNREALISTICALLY LARGE.  IT WILL NOT BE OVERFLOWED.
C               ND1 = SIZE OF ARRAYS CCALL( , ), CCALLD( ), NELEV( ),
C                       IWBAN( ), STALAT( ), STALON( ) AND IFOUND( ).
C                       THIS IS THE MAXIMUM NUMBER OF STATIONS IN THE
C                       LIST TO BE RETURNED.  
C               ND7 = DIMENSION OF IS0( ), IS1( ), IS2( ), AND IS4( ).
C            IS0(L) = HOLDS THE VALUES TO FURNISH FOR GRIB
C                       SECTION 0 (L=1,ND7). 
C            IS1(L) = HOLDS THE VALUES TO FURNISH FOR GRIB
C                       SECTION 1 (L=1,ND7). 
C            IS2(L) = HOLDS THE VALUES FOR GRIB SECTION 2 (L=1,ND7).
C                       NOT USED FOR 1-D PACKING, BUT MUST BE FURNISHED
C                       TO SUBROUTINE PACK. 
C            IS4(L) = HOLDS THE VALUES FOR GRIB SECTION 4.  NONE OF 
C                       THE VALUES NEED BE FURNISHED BY THE USER.
C                       IS4(2) IS SET TO INDICATE NON-GRIDPOINT DATA,
C                       COMPLEX PACKING, ORIGINAL SCALED VALUES TO
C                       BE PACKED (NOT SECOND ORDER SPATIAL DIFFERENCES),
C                       AND MISSING VALUES OR NOT DEPENDING ON WHETHER OR
C                       NOT XMISS NE OR EQ ZERO, RESPECTIVELY.  (INTERNAL)
C            IPACK(J) = THE ARRAY TO HOLD THE ACTUAL PACKED MESSAGE
C                       (J=1,MAX OF ND5).  
C
C   OUTPUT ARGUMENT LIST:      
C                                                                       
C        DATA SET USE                                                   
C        INPUT FILES:
C             FORT.10 - NCEPDATE                 DATE FILE
C             FORT.20 - SFCTBL.XX                HOURLY METAR DATA FILE 
C             FORT.27 - MDL_STATION.TBL          MDL STATION DICTIONARY 
C             FORT.26 - MDL_STATIONS.1081.ALPHA  MOS STATION LIST
C             FORT.5  - MDL_OBSPREP[AVN/MRF].DAT INPUT VARIABLE LIST
C                       (IIN)
C
C        OUTPUT FILES:  (INCLUDING WORK FILES)
C             FORT.70 - PKOBS.$CYCLE             OBS IN MDLPACK FORM 
C             FORT.06 - IOUT                     STANDARD OUT
C                                                                       
C        VARIABLES                                                      
C
C      SUBROUTINE GET_NCEPDATE CALLING ARGUMENTS:
C              IUNIT=FILE NUMBER(10) USED FOR NCEP DATE FILE (INPUT)
C               IERR=ERROR RETURN CODE (OUTPUT)
C              IDATE=CURRENT OPERATIONAL DATE IN MDL FORMAT (OUTPUT)
C                    READ FROM NCEP DATE FILE.
C                IYR=CURRENT YEAR, 4 DIGITS (OUTPUT)
C                IMO=CURRENT MONTH, 2 DIGITS (OUTPUT)
C                IDA=CURRENT DAY, 2 DIGITS (OUTPUT)
C                IHR=CURRENT HOUR, 2 DIGITS (OUTPUT) 
C
C      SUBROUTINE GETOBS CALLING ARGUMENTS:
C              KUNIT=FILE NUMBER USED FOR READING METAR(BUFFER) 
C                    OBS FILE (INPUT)
C              NDATE=DATE OF OBSERVATION DATA (INPUT)
C            ICAO( )=METAR STATION ID TO 74-14 STATION ID CONVERSION 
C                    TABLE (INPUT)
C               NSTA=NUMBER OF STATIONS READ FROM STATION LIST (INPUT)
C               JOPT=OPTION TO READ IN DATA FOR ALL STATIONS (0) OR A
C                    SELECTED NUMBER OF STATION (INPUT)
C             NUMSTA=STATION COUNTER
C             TYPE()=STATION TYPE (OUTPUT)
C        LAT(),LON()=STATION LATITUDE AND LONGITUDE (OUTPUT)
C             TIME()=LIST OF REPORTING TIMES (OUTPUT)
C              TMP()=LIST OF TEMPERATURES (OUTPUT)
C              DEW()=LIST OF DEW POINT TEMPERATURES (OUTPUT)
C    PRWX1(),PRWX2()=LIST OF PRESENT WEATHER WORDS 1 TO 3 (OUTPUT)
C           ,PRWX3()
C              VIS()=LIST OF VISIBILITY
C              WDR()=LIST OF WIND DIRECTION
C              WSP()=LIST OF WIND SPEED
C              GST()=LIST OF WIND GUSTS
C              MSL()=LIST OF MEAN SEA LEVEL PRESSURES
C              ALT()=LIST OF ALTIMETER
C        CA1()-CA6()=LIST OF CLOUD AMOUNTS FOR LAYERS 1-6 
C        CH1()-CH6()=LIST OF CLOUD HEIGHTS FOR LAYERS 1-6
C      PCP1(),PCP3()=LIST OF 1-HOUR, 3-HOUR, 6-HOUR AND
C    ,PCP6(),PCP24() 24-HOUR PRECIP AMOUNTS
C              SUN()=LIST OF SUNSHINE AMOUNTS
C        MX6(),MN6()=LIST OF 6-HOUR MAX AND MIN TEMPERATURES
C        X24(),N24()=LIST OF 24-HOUR MAX AND MIN TEMPERATURES 
C              SND()=LIST OF SNOW DEPTH
C              SNF()=LIST OF SNOW FALL FOR PAST HOUR
C        SAE(),SEE()=LIST OF CLOUD CLASSIFICATION AND CLOUD AMOUNT FROM
C                    GOES EAST SATELLITE (NOT YET AVAILABLE NOV. 1996)  
C        SAW(),SEW()=LIST OF CLOUD CLASSIFICATION AND CLOUD AMOUNT FROM
C                    GOES WEST SATELLITE (NOT YET AVAILABLE NOV. 1996)
C               KERR=GETOBS ERROR RETURN CODE
C
C      SUBROUTINE PACK1D CALLING ARGUMENTS:
C                IOUT = UNIT NUMBER FOR OUTPUT (PRINT) FILE.  (INPUT) 
C              FLD(J) = ARRAY FOR ORIGINIAL INPUT DATA (J=1,NSTA).
C                       (INPUT)
C               IC(J) = ARRAY FOR SCALED AND ROUNDED DATA (J=1,NSTA).
C                       (INTERNAL)
C                NSTA = THE NUMBER OF VALUES IN A( ).  ALSO TREATED
C                       AS THE DIMENSIONS OF A( ), AND IC( ).  (INPUT)
C              IS0(L) = HOLDS THE VALUES TO FURNISH FOR GRIB
C                       SECTION 0 (L=1,ND7).  (INPUT)
C              IS1(L) = HOLDS THE VALUES TO FURNISH FOR GRIB
C                       SECTION 1 (L=1,ND7).  (INPUT)
C              IS2(L) = HOLDS THE VALUES FOR GRIB SECTION 2 (L=1,ND7).
C                       NOT USED FOR 1-D PACKING, BUT MUST BE FURNISHED
C                       TO SUBROUTINE PACK.  (INPUT)
C              IS4(L) = HOLDS THE VALUES FOR GRIB SECTION 4.  NONE OF 
C                       THE VALUES NEED BE FURNISHED BY THE USER.
C                       IS4(2) IS SET TO INDICATE NON-GRIDPOINT DATA,
C                       COMPLEX PACKING, ORIGINAL SCALED VALUES TO
C                       BE PACKED (NOT SECOND ORDER SPATIAL DIFFERENCES),
C                       AND MISSING VALUES OR NOT DEPENDING ON WHETHER OR
C                       NOT XMISS NE OR EQ ZERO, RESPECTIVELY.  (INTERNAL)
C                 ND7 = DIMENSION OF IS0( ), IS1( ), IS2( ), AND IS4( ).
C                       (INPUT)
C              XMISSP = WHEN MISSING POINTS CAN BE PRESENT IN THE DATA,
C                       THEY WILL HAVE THE VALUE XMISSP OR XMISSS.
C                       WHILE XMISSP AND XMISSS ARE REAL NUMBERS, THEY
C                       ARE CONVERTED TO INTEGER, SO THEY SHOULD BE 
C                       WHOLE NUMBERS.  XMISSP IS THE PRIMARY MISSING
C                       VALUE AND IS USUALLY 9999, AND 9999 IS HARDCODED
C                       IN SOME SOFTWARE.  XMISSS IS THE SECONDARY
C                       MISSING VALUE AND ACCOMMODATES THE 9997 PRODUCED
C                       BY SOME EQUATIONS FOR MOS FORECASTS.
C                       XMISSP = 0 INDICATES THAT NO MISSING VALUES
C                       (EITHER PRIMARY OR SECONDARY) ARE PRESENT.
C                       XMISSS = 0 INDICATES THAT NO SECONDARY MISSING
C                       VALUES ARE PRESENT.  (INPUT)
C              XMISSS = SECONDARY MISSING VALUE INDICATOR (SEE XMISSP).
C                       (INPUT)
C            IPACK(J) = THE ARRAY TO HOLD THE ACTUAL PACKED MESSAGE
C                       (J=1,MAX OF ND5).  (OUTPUT)
C                 ND5 = THE SIZE OF IPACK( ).  SINCE THE FULL ARRAY
C                       IPACK( ) IS ZEROED ON ENTRY, ND5 SHOULD NOT BE
C                       UNREALISTICALLY LARGE.  IT WILL NOT BE OVERFLOWED.
C                       (INPUT)  
C               MINPK = VALUES ARE PACKED IN GROUPS OF MINIMUM SIZE
C                       MINPK.  ONLY WHEN THE NUMBER OF BITS TO HANDLE
C                       A GROUP CHANGES WILL A NEW GROUP BE FORMED.  
C                       IF MINPK LE 0, A DIAGNOSTIC WILL BE OUTPUT AND
C                       THE LOCAL VALUE OF MINPK SET = 14.  (INPUT)
C                  LX = THE NUMBER OF GROUPS (THE NUMBER OF 2ND ORDER 
C                       MINIMA).  WHILE NEEDED ONLY IN SUBROUTINE PACK, IT IS
C                       OUTPUT IN THE ARGUMENT LIST IN CASE THE USER
C                       WANTS TO KNOW IT.  (OUTPUT)  
C              IOCTET = THE TOTAL MESSAGE SIZE IN OCTETS.  (OUTPUT)
C                 IER = STATUS RETURN.  (OUTPUT)
C                         0 = GOOD VALUE.
C                       134 = XMISSP AND XMISSS INCONSISTENT.
C                       OTHER VALUES COME FROM CALLED SUBROUTINE.
C
C      SUBROUTINE RDSTAD CALLING ARGUMENTS:
C                IOUT = DEFAULT UNIT NUMBER FOR OUTPUT (PRINT) FILE.  (INPUT) 
C                 IP4 = INDICATES WHETHER (>0) OR NOT (=0) THE STATION 
C                       LIST (CALL LETTERS ONLY) WILL BE WRITTEN TO UNIT
C                       IP4.  IF THERE ARE INPUT ERRORS, THE STATION LIST
C                       WILL BE WRITTEN TO THE DEFAULT OUTPUT FILE UNIT
C                       KFILDO AS WELL AS TO UNIT IP4.  (INPUT)
C                 IP5 = INDICATES WHETHER (>0) OR NOT (=0) THE STATION 
C                       DIRECTORY INFORMATION WILL BE WRITTEN TO UNIT
C                       IP5.  IF THERE ARE INPUT ERRORS, THE STATION LIST
C                       WILL BE WRITTEN TO THE DEFAULT OUTPUT FILE UNIT
C                       KFILDO AS WELL AS TO UNIT IP5.  (INPUT) 
C            KFILD(J) = UNIT NUMBER FROM WHICH TO READ STATION LIST (J=1)
C                       AND STATION DIRECTORY (J=2).  IT IS ASSUMED FILES
C                       HAVE BEEN OPENED.  (INPUT) 
C                 NEW = 1 WHEN NEW 4-LETTER CALL LETTERS ARE TO BE USED;
C                       0 WHEN OLD 3-LETTER CALL LETTERS ARE TO BE USED.
C                       (INPUT)
C          CCALL(K,J) = 8-CHARACTER STATION CALL LETTERS (OR GRIDPOINT
C                       LOCATIONS FOR GRID DEVELOPMENT) TO PROVIDE
C                       OUTPUT FOR (J=1) AND 5 POSSIBLE OTHER STATION
C                       CALL LETTERS (J=2,6) THAT CAN BE USED INSTEAD
C                       IF THE PRIMARY (J=1) STATION CANNOT BE FOUND 
C                       IN AN INPUT DIRECTORY (K=1,NSTA).  ALL STATION
C                       DATA ARE KEYED TO THIS LIST, EXCEPT POSSIBLY 
C                       CCALLD( ).  (CHARACTER*8)
C                       (OUTPUT)
C           CCALLD(K) = CALL LETTERS AS READ.  DIMENSIONED ND1 BECAUSE
C                       IT NEEDS NOT BE GT THE NUMBER OF STATIONS BEING
C                       USED; IT MAY BE DIMENSIONED LARGER IN THE CALLING
C                       PROGRAM (I.E., ND5).  (CHARACTER*8)  (INTERNAL)
C             NAME(K) = NAMES OF STATIONS (K=1,NSTA)  (CHARACTER*20)
C                       (OUTPUT)
C            NELEV(K) = ELEVATION OF STATIONS (K=1,NSTA).  (OUTPUT)
C            IWBAN(K) = WBAN NUMBERS OF STATIONS (K=1,NSTA).  (OUTPUT) 
C           STALAT(K) = LATITUDE OF STATIONS (K=1,NSTA).  (OUTPUT)
C           STALON(K) = LONGITUDE OF STATIONS (K=1,NSTA).  (OUTPUT)
C           ITIMEZ(K) = TIME ZONE INDICATOR.  THE NUMBER OF HOURS
C                       THE STATION IS DIFFERENT FROM UTC (K=1,NSTA).
C                       (OUTPUT)
C           IFOUND(K) = USED TO KEEP TRACK OF THE STATIONS FOUND IN THE
C                       DIRECTORY (K=1,NSTA).  (INTERNAL) 
C                       0 = NOT YET FOUND,
C                       1 = FOUND,
C                       2 = DUPLICATE.
C                 ND1 = SIZE OF ARRAYS CCALL( , ), CCALLD( ), NELEV( ),
C                       IWBAN( ), STALAT( ), STALON( ) AND IFOUND( ).
C                       THIS IS THE MAXIMUM NUMBER OF STATIONS IN THE
C                       LIST TO BE RETURNED.  (INPUT) 
C                NSTA = COUNT OF ELEMENTS IN ARRAY RETURNED.  (OUTPUT)
C                 IER = STATUS RETURN.  (OUTPUT)
C                       0  = GOOD RETURN.
C                       33 = ERROR OR END OF FILE ON UNIT KFILD(2)
C                            WHEN READING THE DIRECTORY.
C                       34 = LIST TOO LONG FOR DIMENSION ND ON UNIT KFIL.
C                       35 = ONE OR MORE STATIONS NOT FOUND IN THE DIRECTORY.
C                       36 = ONE OR MORE DUPLICATES READ IN.
C                       37 = BOTH IER 35 AND 36 HAVE OCCURRED.
C 
C      SUBROUTINE TRAIL CALLING ARGUMENTS:
C                IOUT = UNIT NUMBER OF OUTPUT (PRINT) FILE.  (INPUT)
C              IPUNIT = UNIT NUMBER OF FILE ON WHICH TO WRITE THE
C                       TRAILER.  (INPUT)
C              L3264B = WORD LENGTH IN BITS OF MACHINE BEING USED.  (INPUT)
C              L3264W = THE NUMBER OF 32-BIT "WORDS" TO CONTAIN 64 BITS.
C                       2 FOR 32-BIT MACHINE, 1 FOR 64-BIT MACHINE.
C                       (INPUT)
C              NTOTBY = THE TOTAL NUMBER OF BYTES ON THE FILE.  IT IS 
C                       INCREASED BY 32.  (INPUT/OOUTPUT)
C              NTOTRC = THE TOTAL NUMBER OF RECORDS ON THE FILE.  IT IS
C                       INCREASED BY 1.  (INPUT/OUTPUT)
C                 IER = STATUS RETURN.
C                         0 = GOOD RETURN.
C                       (OUTPUT)
C
C      SUBROUTINE UPDAT CALLING ARGUMENTS:
C             JDATE = BASIC DATE OF FORMAT YYYYMMDDHH.
C               KHR = HOURS TO ADD TO BASIC DATE, CAN BE 
C                     POSITIVE OR NEGATIVE. 
C             MDATE = UPDATED DATE IN SAME FORMAT AS JDATE
C
C      OTHER VARIABLES
C
C              FLD()=DATA ARRAY FOR EACH VARIABLE 
C              IOFST=OFFSET VALUE USED TO DETERMINE IF MISSING STATION 
C                    OVERWRITE IS TO BE INITIATED
C              IPREV=NDATE OF MOST PREVIOUS INPUT READ VARIABLE 
C                    (AFFECTS NEXT CALL TO SUBROUTINE GETOBS) 
C              JDATE=TIME VARIABLE USED IN DETERNINING NDATE
C              RMISS=MISSING VALUE (9999.)
C              
C        SUBPROGRAMS CALLED:   
C          UNIQUE: - CNVTWX, GETOBS, DRUOBSPREP
C
C          LIBRARY:
C            W3LIB - W3TAG
C           MDLLIB - GET_NCEPDATE, PACK1D, RDSTAD, TRAIL, UPDAT
C                                                                       
C        EXIT STATES:
C          COND =    0 - SUCCESSFUL RUN 
C                    2 - DATE IN SFCTBL.XX FILE DOES NOT MATCH
C                        THAT REQUESTED (GETOBS)
C                    6 - SFCTBL.XX FILE WAS EMPTY (GETOBS)
C                   10 - ERROR READING NCEP DATE FILE (GET_NCEPDATE)
C                   33 - ERROR READING STATION DIRECTORY (RDSTAD)
C                   34 - STATION LIST TOO LONG FOR DIMENSION ND5 (RDSTAD)
C                   35 - ONE OR MORE STATIONS NOT FOUND IN STATION DIRECTORY
C                        (RDSTAD)
C                   36 - ONE OR MORE DUPLICATE STATIONS READ IN (RDSTAD)
C                   37 - BOTH IER 35 AND 36 HAVE OCCURRED (RDSTAD)
C                  134 - XMISSP AND XMISSS INCONSISTENT (PACK1D)
C                 9101 - WEATHER ELEMENT NOT RECOGNIZED (CNVTWX)
C                 9103 - CLOUD AMOUNT NOT RECOGNIZED (CNVTWX)
C                    OTHER IER ERROR CODES MAY COME FROM INTERNALLY
C                    CALLED SUBROUTINES.
C                                                                       
C REMARKS:  
C                                                                       
C ATTRIBUTES:                                                           
C   LANGUAGE: FORTRAN 90 (XLF90 COMPILER, QARCH=604, O3)
C   MACHINE:  IBM SP
C
C$$$                                                                    
      CHARACTER*80 CFILE
      CHARACTER*22 PLAIN
      CHARACTER*20 NAME(ND1)
      CHARACTER*20 CONVERTX
      CHARACTER*8 CCALL(ND1,6),CCALLD(ND1),ICAO(ND5)
      CHARACTER*7 PRWX1(ND5),PRWX2(ND5),PRWX3(ND5)
      CHARACTER*4 TYPE(ND5)
      CHARACTER*3 CA1(ND5),CA2(ND5),CA3(ND5)
      CHARACTER*3 CA4(ND5),CA5(ND5),CA6(ND5)
      CHARACTER*3 SAE(ND5),SAW(ND5)
      CHARACTER*1 PL_TMP(22)
      REAL LAT(ND5),LON(ND5),VIS(ND5),MSL(ND5),
     *     ALT(ND5)
      INTEGER TIME(ND5),TMP(ND5),DEW(ND5)
      INTEGER WDR(ND5),WSP(ND5),GST(ND5)
      INTEGER CH1(ND5),CH2(ND5),CH3(ND5)
      INTEGER NCA1(ND5),NCA2(ND5),NCA3(ND5)
      INTEGER NCA4(ND5),NCA5(ND5),NCA6(ND5)
      INTEGER NPRWX1(ND5),NPRWX2(ND5),NPRWX3(ND5)
      INTEGER CH4(ND5),CH5(ND5),CH6(ND5)
      INTEGER PCP1(ND5),PCP3(ND5),PCP6(ND5)
      INTEGER PP24(ND5),SUN(ND5)
      INTEGER MX6(ND5),MN6(ND5),X24(ND5),N24(ND5)
      INTEGER SND(ND5),SNF(ND5)
      INTEGER SEE(ND5),SEW(ND5),ID(4)
      INTEGER IPACK(ND5),IS0(ND7),IS1(ND7),IS2(ND7),IS4(ND7)
      INTEGER NELEV(ND1),IWBAN(ND1),ITIMEZ(ND1),IFOUND(ND1)
      INTEGER KFILD(2)
      REAL FLD(ND5),STALAT(ND1),STALON(ND1)
      REAL XMISSP,XMISSS,IC(ND5)
      DATA IUNIT/10/,RMISS/9999./
      DATA JOPT/1/,IPUNIT/70/
      DATA NTRASH/0/,XMISSP/9999./,XMISSS/0./,MINPK/14/
      DATA KFILD/26,27/,NTOTBY/0/,NTOTRC/0/
CINTEL
      CONVERTX='BIG_ENDIAN'
      IFILEND=0
      ISYSEND=0
      IER=0
CINTEL
      CALL W3TAGB('OBSPREP.F',2000,0039,0072,'OSD211') 
C
C        GET CURRENT DATE FROM NCEP DATE FILE.
C
      CALL GET_NCEPDATE(IUNIT,IYR,IMO,IDA,IHR,IDATE,IERR)
      IF (IERR.NE.0) THEN
        WRITE(IOUT,10) IERR
 10     FORMAT(' ERROR READING NCEP DATE FILE.  IERR = ',I4)
        CALL W3TAGE('OBSPREP.F') 
        STOP 10 
      ENDIF
C
C        READ IN THE EXTRA LINE AT THE TOP OF THE VARIABLE LIST
C
      READ(IIN,20)CFILE
 20   FORMAT(A80)
CINTEL
C
C        OPEN THE OUTPUT TDLPACK FILE (IPUNIT)
C
      OPEN(UNIT=IPUNIT,FORM='UNFORMATTED',STATUS='NEW',
     1     IOSTAT=IOS,CONVERT=CONVERTX)
      WRITE(IOUT,25)IPUNIT,CFILE
 25   FORMAT(' OPENING FILE ON UNIT NO.',I3,', FILE = ',A80)
      IF(IOS.NE.0)THEN
         WRITE(KFILDO,30)IPUNIT,IOS,CFILE
 30      FORMAT(/,' ****TROUBLE OPENING FILE ON UNIT NO.',I3,
     1            '.  IOSTAT =',I5,3X,A60)
      ENDIF
CINTEL
C
C        GET CORRESPONDING ICAO STATION CALL LETTERS FOR EACH STATION 
C        IN THE MOS FORECAST FILE.
C
	CALL RDSTAD(IOUT,0,0,KFILD,1,CCALL,CCALLD,NAME,NELEV,
     &              IWBAN,STALAT,STALON,ITIMEZ,IFOUND,ND1,NSTA,
     &              IER)
	DO I=1,NSTA
	ICAO(I)=CCALL(I,1)
	ENDDO
C
C        LOOP THROUGH INPUT RECORDS AND PROCESS EACH OBSERVATION
C        ELEMENT.
C
 100  READ(IIN,120) (ID(J),J=1,4),KUNIT,IOFST,ISCALE
 120  FORMAT(4I10,3I4)
C
C        CHECK FOR TERMINATOR AND EXIT LOOP IF FOUND.
C
      IF (ID(1).EQ.999999999) GOTO 900
C
C        CALCULATE THE DATE/HOUR OF THE OBS TO PROCESS
C
C        ADD PROJECTION HOUR TO INITIAL TIME
      IF (ID(3).EQ.0) THEN
        JDATE=IDATE
      ELSE
        CALL UPDAT(IDATE,ID(3),JDATE)
      ENDIF
C        ADJUST DATE/HOUR WITH THE HOUR OFFSET.
      IF (IOFST.EQ.0) THEN
        NDATE=JDATE
      ELSE
        CALL UPDAT(JDATE,-IOFST,NDATE)
      ENDIF
C        ECHO PROCESSING INFO.
      WRITE(IOUT,130) (ID(J),J=1,4),NDATE
 130  FORMAT('PROCESSING ID: ',4I10,' WITH OBS FROM ',I10)
C
C        GET OBSERVATIONS FROM THE SFCTBL.XX FILE. IF
C        PROCESSING A DIFFERENT HOUR THAN PREVIOUSLY THEN
C        GET NEW OBSERVATIONS.  OTHERWISE, WE ALREADY AHVE THE OBS. 
C
       IF(NDATE.NE.IPREV)THEN
        CALL GETOBS(KUNIT,NDATE,ICAO,NSTA,JOPT,NUMSTA,
     *              TYPE,LAT,LON,
     *              TIME,TMP,DEW,PRWX1,PRWX2,PRWX3,VIS,WDR,WSP,
     *              GST,MSL,ALT,CA1,CH1,CA2,CH2,CA3,CH3,CA4,CH4,
     *              CA5,CH5,CA6,CH6,PCP1,PCP3,PCP6,PP24,SUN,
     *              MX6,MN6,X24,N24,SND,SNF,SAE,SEE,SAW,SEW,
     *              KERR)
        IF ((KERR.EQ.2).OR.(KERR.EQ.6)) THEN
          WRITE(IOUT,150) KERR
 150      FORMAT(' ERROR RETURN FROM SUBR. GETOBS = ',I4)
        ENDIF
        IPREV=NDATE
       ENDIF
C
C        INITIALIZE WORK ARRAYS
C
      DO 200 N=1,NSTA
        FLD(N)=RMISS
 200  CONTINUE
C
C        CHOOSE THE APPROPRIATE OPTION TO PROCESS OB.
C
      IF (ID(1).EQ.702000000) THEN
C        PROCESS TEMPERATURE OBS.
        DO N=1,NSTA
          FLD(N)=FLOAT(TMP(N))
        ENDDO
        ILEN=16
        PLAIN=' OBS TEMPERATURE      '
      ELSEIF (ID(1).EQ.703100000) THEN
C        PROCESS DEW POINT OBS.
        DO N=1,NSTA
          FLD(N)=FLOAT(DEW(N))
        ENDDO
        ILEN=14
        PLAIN=' OBS DEW POINT        '
      ELSEIF (ID(1).EQ.704200000) THEN
C        PROCESS WIND DIRECTION OBS.
        DO N=1,NSTA
          FLD(N)=FLOAT(WDR(N))
          IF(WDR(N).EQ.-9)FLD(N)=990.
        ENDDO
        ILEN=19
        PLAIN=' OBS WIND DIRECTION   '
      ELSEIF (ID(1).EQ.704210000) THEN
C        PROCESS WIND SPEED OBS.
        DO N=1,NSTA
          FLD(N)=FLOAT(WSP(N))
        ENDDO
        ILEN=15
        PLAIN=' OBS WIND SPEED       '
      ELSEIF (ID(1).EQ.704211000) THEN
C        PROCESS WIND GUST OBS.
        DO N=1,NSTA
          FLD(N)=FLOAT(GST(N))
        ENDDO
        ILEN=14
        PLAIN=' OBS WIND GUST        '
      ELSEIF (ID(1).EQ.708100000) THEN
C        PROCESS VISIBILITY OBS.
        DO N=1,NSTA
          FLD(N)=VIS(N)
        ENDDO
        ILEN=15
        PLAIN=' OBS VISIBILITY       '
      ELSEIF (ID(1).EQ.708320000) THEN
C        CALCULATE CLOUD AMOUNT -LYR 1
         CALL CNVTWX(IOUT,NDATE,ICAO,NSTA,3,TYPE,CA1,NCA1)
        DO N=1,NSTA
          FLD(N)=FLOAT(NCA1(N))
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD AMT_LYR 1  '
      ELSEIF (ID(1).EQ.708321000) THEN
C        CALCULATE CLOUD HEIGHT -LYR 1
        DO N=1,NSTA
          FLD(N)=FLOAT(CH1(N))
          IF((NCA1(N).EQ.0).OR.(NCA1(N).EQ.1))THEN
           FLD(N)=888.
          ENDIF
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD HGT-LYR 1  '
      ELSEIF (ID(1).EQ.708322000) THEN
C        CALCULATE CLOUD AMOUNT -LYR 2
         CALL CNVTWX(IOUT,NDATE,ICAO,NSTA,3,TYPE,CA2,NCA2)
        DO N=1,NSTA
          FLD(N)=FLOAT(NCA2(N))
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD AMT_LYR 2  '
      ELSEIF (ID(1).EQ.708323000) THEN
C        CALCULATE CLOUD HEIGHT -LYR 2
        DO N=1,NSTA
          FLD(N)=FLOAT(CH2(N))
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD HGT-LYR 2  '
      ELSEIF (ID(1).EQ.708324000) THEN
C        CALCULATE CLOUD AMOUNT -LYR 3
         CALL CNVTWX(IOUT,NDATE,ICAO,NSTA,3,TYPE,CA3,NCA3)
        DO N=1,NSTA
          FLD(N)=FLOAT(NCA3(N))
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD AMT_LYR 3  '
      ELSEIF (ID(1).EQ.708325000) THEN
C        CALCULATE CLOUD HEIGHT -LYR 3
        DO N=1,NSTA
          FLD(N)=FLOAT(CH3(N))
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD HGT-LYR 3  '
      ELSEIF (ID(1).EQ.708326000) THEN
C        CALCULATE CLOUD AMOUNT -LYR 4
         CALL CNVTWX(IOUT,NDATE,ICAO,NSTA,3,TYPE,CA4,NCA4)
        DO N=1,NSTA
          FLD(N)=FLOAT(NCA4(N))
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD AMT_LYR 4  '
      ELSEIF (ID(1).EQ.708327000) THEN
C        CALCULATE CLOUD HEIGHT -LYR 4
        DO N=1,NSTA
          FLD(N)=FLOAT(CH4(N))
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD HGT-LYR 4  '
      ELSEIF (ID(1).EQ.708328000) THEN
C        CALCULATE CLOUD AMOUNT -LYR 5
         CALL CNVTWX(IOUT,NDATE,ICAO,NSTA,3,TYPE,CA5,NCA5)
        DO N=1,NSTA
          FLD(N)=FLOAT(NCA5(N))
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD AMT_LYR 5  '
      ELSEIF (ID(1).EQ.708329000) THEN
C        CALCULATE CLOUD HEIGHT -LYR 5
        DO N=1,NSTA
          FLD(N)=FLOAT(CH5(N))
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD HGT-LYR 5  '
      ELSEIF (ID(1).EQ.708330000) THEN
C        CALCULATE CLOUD AMOUNT -LYR 6
         CALL CNVTWX(IOUT,NDATE,ICAO,NSTA,3,TYPE,CA6,NCA6)
        DO N=1,NSTA
          FLD(N)=FLOAT(NCA6(N))
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD AMT_LYR 6  '
      ELSEIF (ID(1).EQ.708331000) THEN
C        CALCULATE CLOUD HEIGHT -LYR 6
        DO N=1,NSTA
          FLD(N)=FLOAT(CH6(N))
        ENDDO
        ILEN=20
        PLAIN=' OBS CLOUD HGT-LYR 6  '
      ELSEIF (ID(1).EQ.708500000) THEN
C        DETERMINE PRESENT WEATHER - GROUP 1
         CALL CNVTWX(IOUT,NDATE,ICAO,NSTA,1,TYPE,PRWX1,NPRWX1)
        DO N=1,NSTA
          FLD(N)=FLOAT(NPRWX1(N))
        ENDDO
        ILEN=19
        PLAIN=' OBS WEATHER (PWX1)   '
      ELSEIF (ID(1).EQ.708510000) THEN
C        DETERMINE PRESENT WEATHER - GROUP 2
         CALL CNVTWX(IOUT,NDATE,ICAO,NSTA,1,TYPE,PRWX2,NPRWX2)
        DO N=1,NSTA
          FLD(N)=FLOAT(NPRWX2(N))
          IF(NPRWX1(N).EQ.0)FLD(N)=9999.
        ENDDO
        ILEN=19
        PLAIN=' OBS WEATHER (PWX2)   '
      ELSEIF (ID(1).EQ.708520000) THEN
C        DETERMINE PRESENT WEATHER - GROUP 3
         CALL CNVTWX(IOUT,NDATE,ICAO,NSTA,1,TYPE,PRWX3,NPRWX3)
        DO N=1,NSTA
          FLD(N)=FLOAT(NPRWX3(N))
          IF(NPRWX1(N).EQ.0)FLD(N)=9999.
        ENDDO
        ILEN=19
        PLAIN=' OBS WEATHER (PWX3)   '
      ELSE
C        NOT A VALID OPTION
        WRITE(IOUT,700) ID(1)
 700    FORMAT(' ID(1) = ',I10,' IS NOT RECOGNIZED BY OBSPREP.',
     *  ' NO PROCESSING DONE.')
        GOTO 100
      ENDIF
C
C        WRITE OUT OBS DATA TO U201 INPUT FILE PKOBS.$CYCLE
C
C        PACK DATA INTO MDL PACK USING SUBROUTINE PACK1D. START BY 
C        INITIALIZING KEY ARRAYS.  
C
          DO L=1,ND7
            IS0(L)=0
            IS1(L)=0
            IS2(L)=0
            IS4(L)=0
          ENDDO
C
C        CALCULATE DATA FOR PACKING INFORMATION AND STORE THEM INTO THE
C        PROPER IS1 ARRAY. ONCE IS1 DATA ARRAY CALCULATION IS COMPLETE,
C        CALL SUBROUTINE PACK1D. PACK DATA INTO IPACK() ARRAY ONE ELEMENT
C        AT A TIME. 
C
            IYEAR=NDATE/1000000
            IMO=(NDATE-(IYEAR*1000000))/10000
            IDAY=(NDATE-((IYEAR*1000000)+(IMO*10000)))/100
            IZHR=NDATE-((IYEAR*1000000)+(IMO*10000)+(IDAY*100))
            IS1(3)=IYEAR
            IS1(4)=IMO
            IS1(5)=IDAY
            IS1(6)=IZHR
            IS1(8)=NDATE
C
C        WRITE OUT CALL LETTER RECORD.  
C
              NSTAOCT=NSTA*8
              IF(L3264B .EQ. 64) THEN
                WRITE(IPUNIT,IOSTAT=IOS)NSTAOCT,
     &               (ICAO(N),N=1,NSTA)
              ELSE
                WRITE(IPUNIT,IOSTAT=IOS)NTRASH,NSTAOCT,
     &               (ICAO(N),N=1,NSTA)
              ENDIF
              IF(IOS .NE. 0) THEN
                WRITE(IOUT,600)IOS
 600            FORMAT(//,' ****CALL LETTER ERROR: IOS = ',I5,
     &                 /,'     STOPPED IN OBSPREP AT 600.')
              CALL W3TAGE('OBSPREP.F')
              STOP 600
              ENDIF
C
C        BEGIN PACKING DATA. 
C
              IS1(9)=ID(1)
              IS1(17)=ISCALE
              IS1(22)=ILEN
              CALL PUTCHAR(PLAIN,PL_TMP,22)
              DO L=1,ILEN
               IS1(22 +L)=IACHAR(PL_TMP(L))
              END DO
              CALL PACK1D(IOUT,FLD,IC,NSTA,IS0,IS1,IS2,IS4,
     1                    ND7,XMISSP,XMISSS,IPACK,ND5,
     2                    MINPK,LX,IOCTET,L3264B,IER)
C
C        WRITE OUT ANY PACKING ERRORS.
C
              IF(IER .NE. 0) THEN
                WRITE(IOUT,610)IER
 610            FORMAT(' PACK1D ERROR CODE IS: ',I5)
              ENDIF
C
C        WRITE OUT PACKED DATA IN ARRAY IPACK.  
C
            IF(L3264B.EQ.64)THEN
              WRITE(IPUNIT,IOSTAT=IOS)IOCTET,(IPACK(II),II=1,IOCTET/8)
            ELSE
              WRITE(IPUNIT,IOSTAT=IOS)NTRASH,IOCTET,(IPACK(II),II=1,
     &                                 IOCTET/4)
            ENDIF
            IF(IOS .NE. 0) THEN
                WRITE(IOUT,620)IOS
 620            FORMAT(//' ****DATA RECORD ERROR: IOS = ',I5,
     &                  /'    STOPPED IN OBSPREP AT 620.')
                CALL W3TAGE('OBSPREP.F')
                STOP 620
            ENDIF

C        WRITE THE END-OF-FILE (EOF) "TRAILER" RECORD WHICH CONTAINS 24 BYTES
C        AND THE VALUE 9999 PACKED IN BYTES 17-20. 
C
            CALL TRAIL(IOUT,IPUNIT,L3264B,L3264W,NTOTBY,NTOTRC,IER)
C
              IF(IER .NE. 0) THEN
                WRITE(IOUT,630)IOS
 630            FORMAT(//,' ****END OF FILE TRAILER RECORD ERROR: IOS ',
     &                 '= ', I5,/'     STOPPED IN OBSPREP AT 630.')
                CALL W3TAGE('OBSPREP.F') 
                STOP 630         
              ENDIF

C
C        RETURN TO BEGINNING OF LOOP AND READ IN ANOTHER
C        ELEMENT TO PROCESS.
C
      GOTO 100
 900  CONTINUE
      RETURN
      END
