         SUBROUTINE CHKGRID2(KFILDO,KGDS,JMAP,NNXS,NNYS,
     1                       AALAT,AALON,OORIENT,XXLAT,
     2                       DDX,IDMDL,NDATE,JJSUBSET,
     3                       JCONVRT)
C
C$$$   SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: CHKGID2
C   PRGMMR: RUDACK          ORG: W/OSD21          DATE: 2003-07-01
C
C ABSTRACT: CHECK THAT THE GRID CHARACTERISTICS FOUND IN THE
C           GRID LIST FILE ARE EQUAL TO THOSE FOUND IN
C           THE GRIB FILE. THE LATITUDE AND LONGITUDE COMPARISON
C           BETWEEN GRIDS ARE PERFORMED TO THE NEAREST MILLIDEGREE.
C           THE TRUE MESH COMPARISON IS PERFORMED TO THE NEAREST
C           MILLIMETER.  IN ORDER TO PRESERVE THE ASSUMED FOUR DECIMAL
C           CORRECTNESS OF THE GRID SPECIFICATIONS FOUND THE GRID
C           LIST FILE AND COMBAT THE ROUNDING ISSUES ASSOCIATED WITH
C           THIS PRECISION REALTIVE TO THE GRIB FILE, THE GRID
C           CROSS-CHECKS ARE MADE BY DIFFERENCING THE TWO GRID SPECS
C           IN QUESTION.  IF THE DIFFERENCE IS LESS THAN OR EQUAL
C           TO ONE, THE GRID SPECIFICATIONS FOR THE GRIB FILE
C           AND GRID LIST FILE ARE CONSIDERED EQUAL FOR THE PURPOSES
C           OF U130.  IN THIS WAY, THE FOUR DECIMAL PRECISION
C           STIPULATED IN THE GRID LIST FILE CAN THEN BE TDLPACKED
C           AS SUCH.
C
C PROGRAM HISTORY LOG:
C    JUNE       2003   RUDACK   MDL   MOS-2000          
C    OCTOBER    2004   RUDACK   CHANGED 'INT( )' FUNCTIONS 
C                               TO 'NINT( )'. 
C    SEPTEMBER  2005   RUDACK   MODIFIED CODE TO MEET
C                                   OPERATIONAL REQUIREMENTS.
C    NOVEMBER   2007   WIEDENFELD COMPLETED OPERATIONAL REQUIREMENTS
C     
C USAGE: CALLED BY RDGRIB1
C
C  DATA SET USE:
C    OUTPUT FILE:
C         FORT.KFILDO - UNIT NUMBER OF OUTPUT (PRINT) FILE.  (OUTPUT)
C
C  VARIABLES:
C              KFILDO = UNIT NUMBER OF OUTPUT (PRINT) FILE.  INITIALLY,
C                       THIS IS SET BY DATA STATEMENT.  LATER, IN 
C                       IPOPEN, IF IP(1) NE 0, KFILDO IS SET = IP(1).
C                       THIS ALLOWS CHANGING THE "DEFAULT" PRINT FILE ON 
C                       THE FLY.  OTHERWISE, ON SOME SYSTEMS, THE OUTPUT
C                       FILE MIGHT HAVE THE SAME NAME AND BE
C                       OVERWRITTEN.  WHEN THE OUTPUT FILE IS NOT THE
C                       ORIGINAL DEFAULT, THE NAME IS GENERATED AND CAN
C                       BE DIFFERENT FOR EACH RUN.  (INPUT)
C             KGDS(J) = ARRAY CONTAINING THE GRID DEFINITION INFORMATION
C                       (J=1,200).  (INPUT)
C                       LAMBERT CONFORMAL GRIDS
C                          (1) - DESIGNATED VALUE FOR LAMBERT GRID (=3)
C                          (2) - NX NR POINTS ALONG X-AXIS
C                          (3) - NY NR POINTS ALONG Y-AXIS
C                          (4) - LA1 LAT OF ORIGIN (LOWER LEFT)
C                          (5) - LO1 LON OF ORIGIN (LOWER LEFT)
C                          (6) - RESOLUTION AND COMPONENT FLAG
C                          (7) - LOV - ORIENTATION OF GRID
C                          (8) - DX - X-DIR INCREMENT
C                          (9) - DY - Y-DIR INCREMENT
C                         (11) - SCANNING MODE FLAG 
C                         (12) - LATIN 1 - FIRST LAT FROM POLE OF 
C                                SECANT CONE INTERSECTION
C                         (13) - LATIN 2 - SECOND LAT FROM POLE OF 
C                                SECANT CONE INTERSECTION
C                       POLAR STEREOGRAPHIC GRIDS
C                          (1) - DESIGNATED VALUE FOR POLAR STEREOGRAPHIC GRID (=5)
C                          (2) - N(I) NR POINTS ALONG LAT CIRCLE
C                          (3) - N(J) NR POINTS ALONG LON CIRCLE
C                          (4) - LA(1) LATITUDE OF ORIGIN
C                          (5) - LO(1) LONGITUDE OF ORIGIN
C                          (6) - RESOLUTION AND COMPONENT FLAG 
C                          (7) - LOV GRID ORIENTATION
C                          (8) - DX - X DIRECTION INCREMENT
C                          (9) - DY - Y DIRECTION INCREMENT
C                         (11) - SCANNING MODE FLAG 
C                         (12) - LAD - LATITUDE WHERE DX AND DY ARE SPECIFIED
C                       MERCATOR GRIDS 
C                          (1) - DESIGNATED VALUE FOR MERCATOR GRID (1 OR 7)
C                          (2) - N(I) NR POINTS ON LATITUDE CIRCLE
C                          (3) - N(J) NR POINTS ON LONGITUDE MERIDIAN
C                          (4) - LA(1) LATITUDE OF ORIGIN
C                          (5) - LO(1) LONGITUDE OF ORIGIN
C                          (6) - RESOLUTION AND COMPONENT FLAG
C                          (7) - ORIENTATION OF THE GRID (NOT DEFINED FOR GRIB1)
C                          (8) - LONGITUDINAL DIR GRID LENGTH
C                          (9) - LATITUDINAL DIR GRID LENGTH
C                         (11) - SCANNING MODE FLAG
C                         (12) - LATIT - LATITUDE OF PROJECTION INTERSECTION
C                JMAP = MAP PROJECTION OF OUTPUT GRID.  (INPUT)
C                       3 = N.H. LAMBERT 
C                       5 = N.H. POLAR STEREOGRAPHIC
C                  1 OR 7 = MERCATOR
C                NNXS = X DIMENSION OF OUTPUT GRID.  (INPUT)                   
C                NNYS = Y DIMENSION OF OUTPUT GRID.  (INPUT)
C               AALAT = LATITUDE OF ORIGIN (1,1) OF OUTPUT GRID (DEGREES N).
C                       READ FROM THE GLF.  (INPUT)    
C               AALON = LONGITUDE OF ORIGIN (1,1) OF OUTPUT GRID (POSITIVE 
C                       DEGREES WEST).  READ FROM THE GLF.  (INPUT)
C             OORIENT = ORIENTATION OF OUTPUT GRID.  MERIDIAN PARALLEL TO Y    
C                       AXIS (POSITIVE DEGREES WEST).  (INPUT)                        
C               XXLAT = FOR LAMBERT CONICAL CONFORMAL, THE LATITUDE WHERE
C                       CONE IS TANGENT ON THE OUTPUT GRID.  FOR NORTH POLAR 
C                       STEREOGRAPHIC, LATITUDE WHERE GRID LENGTH APPLIES.  
C                       (INPUT)
C                 DDX = X INCREMENT (IN KM) AT XLAT OF OUTPUT GRID.  (INPUT) 
C            IDMDL(J) = ARRAY CONTAINING THE MOS-2000 ID TO BE 
C                       TDLPACKED (J=1,4).  (INPUT)      
C               NDATE = THE CURRENT DATE BEING PROCESSED.  (INPUT)
C            JJSUBSET = A VALUE OF ONE INDICATES A SUBSET GRID OF THE 
C                       ORIGINAL GRIB GRID IS TO BE PROCESSED, 
C                       OTHERWISE ZERO.  (INPUT)    
C             JCONVRT = FLAG INDICATING IF GRIB1 (=1) OR GRIB2 (=2) DATA
C                       IS TO BE TDLPACKED.  (INPUT)
C                LTAG = FLAG REPRESENTING THE TYPE OF MAP PROJECTION
C                       FOR WHICH AN ERROR OCCURRED IN COMPARING GRID
C                       CHARACTERISTICS.  (INTERNAL) 
C           STCPRM(J) = AN ARRAY THAT HOLDS INFORMATION RELATING TO
C                       A LAMBERT CONFORMAL PROJECTION ON A CONE
C                       TANGENT TO THE GLOBE AT LATITUDE 'TANLAT'
C                       DEGREES (J=1,9).  USED BY THE "CMAPF" FUNCTIONS.
C                       (INTERNAL, AUTOMATIC ARRAY)
C              TANLAT = RECALCULATED TANGENT LATITUDE FROM THE TWO
C                       DIFFERENT TANGENT LATITUDES FOUND IN THE
C                       GRIB FILE FOR THE LAMBERT CONFORMAL GRID.
C                       (INTERNAL)
C           XMESH_NEW = RECALCULATED MESH LENGTH AT 'TANLAT'.  (INTERNAL)                       
C             JCHANGE = A FLAG (SET TO A VALUE OF 1) IF THE TANGENT 
C                       LATITUDE AND TRUE MESH LENGTH HAVE BEEN CHANGED
C                       FOR A LAMBERT PROJECTION GRID (OTHERWISE SET TO
C                       A VALUE OF ZERO).  (INTERNAL)  
C              JWRONG = FLAG INDICATING THAT THE GRID SPECIFICATIONS
C                       ARE NOT EQUAL.  (INTERNAL)                   
C               MXLAT = PREDEFINED LATITUDE WHERE DX AND DY ARE
C                       SPECIFIED WHEN A POLAR STEREOGRAPHIC GRID IS
C                       USED FOR A GRIB1 MESSAGE (MXLAT=60000, I.E. 60N).
C                       (INTERNAL)
C
C SUBROUTINES CALLED: EQVLAT, STLMBR, STCM1P, CGSZLL
C
C EXIT STATES:
C   COND =   0 - SUCCESSFUL RUN
C          110 - NEGATIVE LOWER LEFT LONGITUDE AND/OR ORIENTATION
C          132 - X DIRECTION INCREMENT DOES NOT EQUAL Y DIRECTION. 
C                FOR LARGE GRID
C          140 - X DIRECTION INCREMENT DOES NOT EQYAL Y DIRECTION,
C                FOR POLAR STEROGRAPHIC.
C          143 - LAT GRID LENGTH DOES NOT EQUAL LON.
C          145 - INCORRECT SCANNING MODE.
C          965 - GRID CHARACTERISTICS DO NO MATCH. MAP PROJ, TRUE
C                MESH, AND LAT AT TRUE MESH: LTAG =1
C          970 - GRID CHARACTERISTICS DO NO MATCH. MAP PROJ, LOWER
C                LEFT LON, GRID ORIENT, TRUE MESH, AND LAT AT TRUE
C                MESH: LTAG =2
C          972 - GRID CHARACTERISTICS DO NO MATCH. MAP PROJ, TRUE
C                MESH, AND LAT AT TRUE MESH: LTAG =3
C          975 - GRID CHARACTERISTICS DO NO MATCH. MAP PROJ, LOWER
C                LEFT LON, GRID ORIENT, TRUE MESH, AND LAT AT TRUE
C                MESH: LTAG =4
C          977 - GRID CHARACTERISTICS DO NO MATCH. MAP PROJ, TRUE
C                MESH, AND LAT AT TRUE MESH: LTAG =5
C          980 - GRID CHARACTERISTICS DO NO MATCH. MAP PROJ, LOWER
C                LEFT LON, GRID ORIENT, TRUE MESH, AND LAT AT TRUE
C                MESH: LTAG =6
C
C REMARKS:  NONE
C
C ATTRIBUTES:
C   LANGUAGE:  FORTRAN 90 (xlf90 compiler)
C   MACHINE:  IBM SP
C$$$
C
      DIMENSION IDMDL(4),STCPRM(9),KGDS(200)
C
      LTAG=0
      JCHANGE=0
      JWRONG=0
      MXLAT=60000
C
C        PLACE THE GRID CHARACTERISTICS FOUND IN THE GRID LIST
C        FILE INTO A FORM THAT WILL ALLOW FOR A COMPARISON WITH 
C        THE VALUES FOUND IN THE GRIB FILE. 
C
      JALAT=NINT(AALAT*1000)
      JALON=NINT(AALON*1000)
      JORIENT=NINT(OORIENT*1000)
      JXLAT=NINT(XXLAT*1000)
      JDX=NINT(DDX*1000)
C
C        REASSIGN KGDS(1) TO A VALUE OF "7" IF A MERCATOR
C        PROJECTION IS BEING DELT WITH.  THIS MAY OCCURR WITH
C        A GRIB1 FILE.
C
      IF(KGDS(1).EQ.1) THEN
         KGDS_1=7
      ELSE
         KGDS_1=KGDS(1)
      ENDIF
C
C        ENSURE THAT LONGITUDE VALUE FOR THE LOWER LEFT
C        PORTION OF THE GRID ON THE GRIB FILE IS IN 
C        POSITIVE DEGREES WEST.  FOR GRIB1, 'GETGB' RETURNS
C        LONGITUDE VALUES POSITIVE DEGREES EAST OR NEGATIVE
C        DEGREES WEST.  GRIB2 LONGITUDE VALUES ARE DEFINED 
C        TO BE POSITIVE EAST LONGITUDE.
C 
      IF(JCONVRT.EQ.1) THEN 
         IF(KGDS(5).GT.0) THEN
            KGDS_5=(3600000-KGDS(5))/10
         ELSE
            KGDS_5=-KGDS(5)/10
         ENDIF
      ELSE
         KGDS_5=(3600000-KGDS(5))/10
      ENDIF
C
C        ENSURE THAT THE ORIENT SPECIFIED IN THE GRID FILE 
C        IS IN POSITIVE DEGREES WEST.  NOTE THAT THE ORIENT FOR
C        A MERCATOR PROJECTION IN GRIB1 IS NOT DEFINED.
C
      IF(JCONVRT.EQ.1) THEN
         IF(KGDS(7).GT.0) THEN
            KGDS_7=(3600000-KGDS(7))/10
         ELSE
            KGDS_7=-KGDS(7)/10
         ENDIF
      ELSE
         KGDS_7=(3600000-KGDS(7))/10
      ENDIF
C
C        PLACE INTO THE UNITS OF MIILIDEGREES AND MILLIMETERS.
C
      IF((JMAP.EQ.3).OR.(JMAP.EQ.5)) THEN
         KGDS_4=KGDS(4)/10
         KGDS_8=KGDS(8)/10
         KGDS_9=KGDS(9)/10
         KGDS_12=KGDS(12)/10
         KGDS_13=KGDS(13)/10
      ELSE
         KGDS_4=KGDS(4)/10
         KGDS_8=KGDS(8)/10
         KGDS_9=KGDS(9)/10
         KGDS_12=KGDS(12)/10
      ENDIF 
C
C        CHECK THAT THE LONGITUDE VALUES READ IN FROM THE GRID
C        LIST FILE ARE POSITIVE.
C  
      IF((JALON.LT.0).OR.(JORIENT.LT.0)) THEN
         WRITE(KFILDO,110) 
 110     FORMAT(/,' ****THE LOWER LEFT LONGITUDE AND/OR',
     1            ' GRID ORIENTATION IN THE GRID LIST FILE',
     2            ' IS NEGATIVE.',/,5X,'THESE VALUES MUST',
     3            ' BE POSITIVE WEST.  STOP 110 IN CHKGRID2.')
         CALL W3TAGE('CHKGRID2')
         STOP 110
      ENDIF
C
C        IF THE MAP PROJECTION IS LAMBERT, CHECK THAT
C        THE GRID CHARACTERISTICS ARE THE SAME.  
C
      IF(KGDS_1.EQ.3) THEN
C
C           CHECK FOR CONSISTENCY BETWEEN THE X-DIRECTION
C           INCREMENT AND THE Y-DIRECTION INCREMENT.  
C
         IF(KGDS(8).NE.KGDS(9)) THEN
            WRITE(KFILDO,132) KGDS(8),KGDS(9),NDATE
 132        FORMAT(/,' ****THE X-DIRECTION INCREMENT OF',I7,' DOES',
     1               ' NOT EQUAL THE Y-DIRECTION INCREMENT OF',I7,/,4X,
     2               ' FOR THE LAMBERT GRID BEING PROCESSED',
     3               ' IN THE GRIB FILE FOR DATE ',I10,'. ',/,4X,
     4               ' STOP 132 IN CHKGRID2.')
            CALL W3TAGE('CHKGRID2')
            STOP 132 
         ENDIF
C
C           CHECK FOR CONSISTENCY BETWEEN THE FIRST AND SECOND 
C           LATITUDE FROM POLE OF SECANT CONE. 
C
         IF(KGDS(12).NE.KGDS(13)) THEN
            WRITE(KFILDO,135) KGDS(12),KGDS(13),NDATE
 135        FORMAT(/,' ****THE FIRST AND SECOND LATITUDES',
     1               ' FROM THE POLE AT WHICH THE SECANT',
     2               ' CONE CUTS THE',/,5X,'SPHERICAL', 
     3               ' EARTH ARE NOT EQUAL.',/,5X,
     4               'FIRST LATITUDE = ',1X,I8,' MILLIDEGREES',/,5X,
     5               'SECOND LATITUDE = ',I8,' MILLIDEGREES',/,5X,
     6               'RECALCULATING A NEW TANGET LATITUDE AND',
     7               ' ITS CORRESPONDING TRUE MESH LENGTH FOR DATE ',
     8               I10,'.')  
C          
C              USE THE "CMAPF" LIBRARY ROUTINES TO FIND A NEW TANGET 
C              LATITUDE AND ITS CORRESPONDING TRUE MESH LENGTH. NOTE:
C              NORTH LATITUDE VALUES ARE POSITIVE AND LONGITUDE VALUES 
C              ARE NEGATIVE WEST.  
C
C              PLACE THE LATITUDE VALUES IN TERMS OF DEGREES.
C           
            REFLAT1=REAL(KGDS_12)/1000.
            REFLAT2=REAL(KGDS_13)/1000.
C
C              FIND THE EQUIVALENT LATITUDE.
C 
            TANLAT=EQVLAT(REFLAT1,REFLAT2)
C
C              CONVERT THE ORIENTATION TO NEGATIVE DEGREES WEST.              
C           
            ORIENTN=-REAL(KGDS_7)/1000.    
C
C              SET THE INFORMATION RELATING TO A LAMBERT CONFORMAL 
C              PROJECTION ON A CONE TANGENT TO THE GLOBE AT 
C              LATITUDE 'TANLAT' DEGREES.
C
            CALL STLMBR(STCPRM,TANLAT,ORIENTN)
C
C              REDEFINE THE LOWER LEFT LATITUDE AND LONGITUDE TO
C              DEGREES.  PLACE THE LOWER LEFT LONGITUDE INTO 
C              NEGATIVE DEGREES WEST.  CONVERT THE FIRST LATITUDE 
C              FROM THE POLE (WHERE THE MESH WAS TRUE) TO DEGREES.   
C              CONVERT X-DIRECTION INCREMENT TO KILOMETERS.
C
            XLAT1=REAL(KGDS_4)/1000.
            XLON1=-REAL(KGDS_5)/1000.
            XLATMESH=REAL(KGDS_12)/1000.
            XMESH=REAL(KGDS_8)/1000.
C
C              SET THE MAP TO THE SPECIFIC SPECIFICATIONS FOUND
C              IN THE GRIB FILE.
C
            CALL STCM1P(STCPRM,1,1,XLAT1,XLON1,XLATMESH,ORIENTN,XMESH,0)
C
C              FIND AND PRINT THE NEW "TRUE MESH LENGTH" AT THE NEW 
C              "TANGENT LATITUDE".  THE RETURNED MESH LENGTH IS IN
C              TERMS OF KILOMETERS. 
C
            XMESH_NEW=CGSZLL(STCPRM,TANLAT,ORIENTN)      
C
            WRITE(KFILDO,137) TANLAT,XMESH_NEW
 137        FORMAT(/, ' ****THE NEW TANGENT LATITUDE IS AT ',F7.4,
     1                ' DEGREES NORTH WITH A TRUE MESH OF ',F7.4,
     2                ' KILOMETERS.')
            JCHANGE=1
C
         ENDIF
C
C           PLACE THE TANGENT LATITUDE AND TRUE MESH LENGTH INTO 
C           INTEGER FORM.  THIS IS DONE FOR THE COMPARISON OF 
C           THE GRIDS AND FOR PRINT DIAGNOSTICS.
C
         IF(JCHANGE.EQ.0) THEN
            JMESH_NEW=KGDS_8
            JTANLAT=KGDS_12
         ELSE
            JMESH_NEW=NINT(XMESH_NEW*1000.)
            JTANLAT=NINT(TANLAT*1000.)
         ENDIF
C
C           CHECK THE REMAINING GRID CHARACTERISTICS.
C
         IF((KGDS_1.NE.JMAP).OR.(ABS(KGDS_7-JORIENT).GT.1).OR.
     1      (ABS(JMESH_NEW-JDX).GT.1).OR.
     2      (ABS(JTANLAT-JXLAT).GT.1)) JWRONG=1
C
C           IF THERE IS NO SUBSET GRID DEFINED, CHECK THE LOWER LEFT
C           LATITUDE AND LONGITUDE OF THE GRID AND THE TOTAL NUMBER
C           OF POINTS IN BOTH THE X-Y DIRECTIONS.
C
         IF(JJSUBSET.EQ.0) THEN
            IF((ABS(KGDS_4-JALAT).GT.1).OR.(ABS(KGDS_5-JALON).GT.1).OR.
     1         (KGDS(2).NE.NNXS).OR.(KGDS(3).NE.NNYS)) JWRONG=1
         ENDIF
C
C           ASSIGN THE APPROPRIATE 'LTAG' VALUE FOR PRINT DIAGNOSTICS.
C
         IF(JWRONG.EQ.1) THEN
            IF(JJSUBSET.EQ.0) THEN
               LTAG=2
            ELSE
               LTAG=1
            ENDIF
         ENDIF
C 
C           IF ANY OF THE GRID SPECIFICATIONS DO NOT MATCH, 
C           DECIDE WHICH WRITE STATEMENT IS TO BE PRINTED.
C
         IF(JWRONG.NE.0) GOTO 950 
C
C        IF THE MAP PROJECTION IS NORTH POLAR STEREOGRAPHIC, CHECK
C        THAT THE GRID CHARACTERISTICS ARE THE SAME. IN GRIB,
C        IT IS ASSUMED THAT THE LATITUDE AT WHICH THE GRID
C        LENGTH APPLIES IS 60 DEGREES NORTH. 
C
      ELSEIF(KGDS_1.EQ.5) THEN
C
C           FIRST CHECK FOR CONSISTENCY BETWEEN THE X-DIRECTION
C           INCREMENT AND THE Y-DIRECTION INCREMENT.
C
         IF(KGDS(8).NE.KGDS(9)) THEN
            WRITE(KFILDO,140) KGDS(8),KGDS(9),NDATE
 140        FORMAT(/,' ****THE X-DIRECTION INCREMENT OF',I7,' DOES',
     1               ' NOT EQUAL THE Y-DIRECTION INCREMENT OF',I7,/,4X,
     2               ' FOR THE POLAR STEREOGRAPHIC', 
     3               ' GRID BEING PROCESSED IN THE GRIB FILE FOR',
     4               ' DATE ',I10,'.',/,5X,'STOP 140 IN CHKGRID2.')
            CALL W3TAGE('CHKGRID2')
            STOP 140 
         ENDIF
C
C           CHECK THE REMAINDER GRID CHARACTERISTICS.  
C
         IF((KGDS_1.NE.JMAP).OR.(ABS(KGDS_7-JORIENT).GT.1).OR.
     1      (ABS(KGDS_8-JDX).GT.1)) JWRONG=1
C
C           CHECK THE LATITUDE WHERE THE TRUE MESH IS DEFINED.
C           FOR GRIB1 THE LATITUDE IS PREDEFINED AT 60N.  FOR
C           GRIB2, THE TRUE LATITUDE CAN BE AT ANY LATITUDE.
C
         IF(JCONVRT.EQ.1) THEN
            IF(ABS(JXLAT-MXLAT).GT.1) JWRONG=1
         ELSEIF(JCONVRT.EQ.2) THEN
            IF(ABS(JXLAT-KGDS_12).GT.1) THEN
               JWRONG=1
               MXLAT=KGDS_12
            ENDIF
         ENDIF
C
C           IF THERE IS NO SUBSET GRID DEFINED, CHECK THE LOWER LEFT
C           LATITUDE AND LONGITUDE OF THE GRID AND THE TOTAL NUMBER
C           OF POINTS IN BOTH THE X-Y DIRECTIONS.
C
         IF(JJSUBSET.EQ.0) THEN
            IF((ABS(KGDS_4-JALAT).GT.1).OR.
     1         (ABS(KGDS_5-JALON).GT.1).OR.
     2         (KGDS(2).NE.NNXS).OR.(KGDS(3).NE.NNYS)) JWRONG=1
         ENDIF
C
C           ASSIGN THE APPROPRIATE 'LTAG' VALUE FOR PRINT DIAGNOSTICS.
C
         IF(JWRONG.EQ.1) THEN
            IF(JJSUBSET.EQ.0) THEN
               LTAG=4
            ELSE
               LTAG=3
            ENDIF
         ENDIF
C 
C           IF ANY OF THE GRID SPECIFICATIONS DO NOT MATCH, 
C           DECIDE WHICH WRITE STATEMENT IS TO BE PRINTED.
C
         IF(JWRONG.NE.0) GOTO 950 
C
C        IF THE MAP PROJECTION IS MERCATOR, CHECK
C        THAT THE GRID CHARACTERISTICS ARE THE SAME. 
C
      ELSEIF(KGDS_1.EQ.7) THEN
C
C           CHECK FOR CONSISTENCY BETWEEN THE X-DIRECTION 
C           INCREMENT AND THE Y-DIRECTION INCREMENT.
C
         IF(KGDS(8).NE.KGDS(9)) THEN
            WRITE(KFILDO,143) KGDS(8),KGDS(9),NDATE
 143        FORMAT(/,' ****THE LATITUDINAL DIRECTION GRID LENGTH OF',I7,
     1               ' DOES NOT EQUAL THE LONGITUDINAL',/,5X,'GRID',
     2               ' LENGTH OF',I7,' FOR THE MERCATOR GRID BEING',
     3               ' PROCESSED IN THE GRIB FILE FOR',/,5X,'DATE ',
     4               I10,'.  STOP 143 IN CHKGRID2.')
            CALL W3TAGE('CHKGRID2')
            STOP 143 
         ENDIF
C
C           CHECK THE REMAINING GRID CHARACTERISTICS.  NOTE THAT
C           THE ORIENTATION IS NOT DEFINED IN GRIB1.
C
         IF(JCONVRT.EQ.1) THEN
            IF((KGDS_1.NE.JMAP).OR.(ABS(KGDS_8-JDX).GT.1).OR.
     1         (ABS(KGDS_12-JXLAT).GT.1)) JWRONG=1
         ELSE
            IF((KGDS_1.NE.JMAP).OR.(ABS(KGDS_7-JORIENT).GT.1).OR.
     1         (ABS(KGDS_8-JDX).GT.1).OR.
     2         (ABS(KGDS_12-JXLAT).GT.1)) JWRONG=1
         ENDIF
C
C           IF THERE IS NO SUBSET GRID DEFINED, CHECK THE LOWER LEFT
C           LATITUDE AND LONGITUDE OF THE GRID AND THE TOTAL NUMBER
C           OF POINTS IN BOTH THE X-Y DIRECTIONS.
C
         IF(JJSUBSET.EQ.0) THEN
            IF((ABS(KGDS_4-JALAT).GT.1).OR.
     1         (ABS(KGDS_5-JALON).GT.1).OR.
     2         (KGDS(2).NE.NNXS).OR.(KGDS(3).NE.NNYS)) JWRONG=1
         ENDIF
C
C           ASSIGN THE APPROPRIATE 'LTAG' VALUE FOR PRINT DIAGNOSTICS.
C
         IF(JWRONG.EQ.1) THEN
            IF(JJSUBSET.EQ.0) THEN
               LTAG=6
            ELSE
               LTAG=5
            ENDIF
         ENDIF
C
C           IF ANY OF THE GRID SPECIFICATIONS DO NOT MATCH, 
C           DECIDE UPON THE APPROPRIATE DIAGNOSTIC STATEMENT 
C           TO BE PRINTED.
C
         IF(JWRONG.NE.0) GOTO 950 
C
      ENDIF 
C
C        CHECK THE SCANNING MODE OF THE GRIB GRIDDED DATA.
C        IF THE DATA WAS NOT SCANNED STARTING AT THE LOWER 
C        LEFT CORNER OF THE GRID AND PROCEEDING IN THE +X AND 
C        +Y DIRECTION (WHERE THE ADJACENT POINTS IN THE +X
C        DIRECTION ARE CONSECUTIVE) OR BOUSTROPHEDONICALLY
C        BEGINNING AT THE LOWER LEFT PORTION OF THE GRID,
C        TERMINATE THE PROGRAM WITH AN ERROR MESSAGE.  
C
      IF((KGDS(11).NE.64).AND.(KGDS(11).NE.80)) THEN
         WRITE(KFILDO,145) (IDMDL(J),J=1,4),NDATE,KGDS(11)
 145     FORMAT(/,' ****THE SCANNING MODE OF THE GRIB DATA',
     1            ' FOR THE ELEMENT OF',3I10.9,1X,I3.3,1X,/,4X,
     2            ' FOR DATE ',I10,1X,'IS ',I3,'.  THIS',
     3            ' SCANNING MODE IS NOT IN ACCORDANCE',
     4            ' WITH MOS-2000',/,5X,'SPECIFICATIONS. ',
     5            ' USE A SCANNING MODE OF 64 OR 80.',
     6            '  STOP 145 IN CHKGRID2.')
         CALL W3TAGE('CHKGRID2')
         STOP 145
      ENDIF
C
      GOTO 985
C
 950  WRITE(KFILDO,960) NDATE
 960  FORMAT(/,' ****THE GRID CHARACTERISTICS FOUND IN THE',
     1         ' GRID LIST FILE DO NOT MATCH',/,5X,'THE GRID',
     2         ' CHARACTERISTICS FOUND ON THE GRIB FILE FOR DATE ',I10,
     3         '.',/,5X,'STOP IN CHKGRID2.',//,5X,'NOTE: ALL',
     4         ' LATITUDE AND LONGITUDE VALUES PRINTED ARE ROUNDED',/,
     5         5X,'TO THE NEAREST MILLIDEGREE. THE TRUE MESH IS',
     6         ' ROUNDED TO THE',/,5X,'NEAREST MILLIMETER.')    
C
      IF(LTAG.EQ.1) THEN
         WRITE(KFILDO,965) KGDS_1,JMAP,KGDS_7,JORIENT,
     1                     JMESH_NEW,JDX,JTANLAT,JXLAT 
 965     FORMAT(/,26X,'VALUES IN GRIB FILE',5X,
     1           'VALUES IN GRID LIST FILE',//,5X,'MAP PROJECTION',16X,
     2           I2,24X,I2,/,5X,'GRID ORIENTATION',9X,I7,19X,I7,/,5X,
     3           'TRUE MESH LENGTH',9X,I7,19X,I7,/,5X,'LATITUDE AT',
     4           ' TRUE MESH',4X,I7,19X,I7) 
         CALL W3TAGE('CHKGRID2')
         STOP 965
C
      ELSEIF(LTAG.EQ.2) THEN
C
         WRITE(KFILDO,970) KGDS_1,JMAP,KGDS(2),NNXS,KGDS(3),NNYS,
     1                     KGDS_4,JALAT,KGDS_5,JALON,
     2                     KGDS_7,JORIENT,JMESH_NEW,JDX,
     3                     JTANLAT,JXLAT 
 970     FORMAT(/,26X,'VALUES IN GRIB FILE',5X,
     1           'VALUES IN GRID LIST FILE',//,5X,'MAP PROJECTION',16X,
     2           I2,24X,I2,/,5X,'NX',23X,I7,19X,I7,/,5X,'NY',23X,I7,19X,
     3           I7,/,5X,'LOWER LEFT LATITUDE',6X,I7,19X,I7,/,5X,
     4           'LOWER LEFT LONGITUDE',5X,I7,19X,I7,/,5X,
     5           'GRID ORIENTATION',9X,I7,19X,I7,/,5X,
     6           'TRUE MESH LENGTH',9X,I7,19X,I7,/,5X,
     7           'LATITUDE AT TRUE MESH',4X,I7,19X,I7) 
         CALL W3TAGE('CHKGRID2')
         STOP 970 
C
      ELSEIF(LTAG.EQ.3) THEN
C
         WRITE(KFILDO,972) KGDS_1,JMAP,KGDS_7,JORIENT,KGDS_8,JDX,MXLAT,
     1                     JXLAT
 972     FORMAT(/,26X,'VALUES IN GRIB FILE',5X,
     1           'VALUES IN GRID LIST FILE',//,5X,'MAP PROJECTION',16X,
     2           I2,24X,I2,/,5X,'GRID ORIENTATION',9X,I7,19X,I7,/,5X,
     3           'TRUE MESH LENGTH',9X,I7,19X,I7,/,5X,
     4           'LATITUDE AT TRUE MESH',6X,I5,19X,I7) 
         CALL W3TAGE('CHKGRID2')
         STOP 972
C
      ELSEIF(LTAG.EQ.4) THEN
C
         WRITE(KFILDO,975) KGDS_1,JMAP,KGDS(2),NNXS,KGDS(3),NNYS,
     1                     KGDS_4,JALAT,KGDS_5,JALON,
     2                     KGDS_7,JORIENT,KGDS_8,JDX,MXLAT,JXLAT
 975     FORMAT(/,26X,'VALUES IN GRIB FILE',5X,
     1           'VALUES IN GRID LIST FILE',//,5X,'MAP PROJECTION',16X,
     2           I2,24X,I2,/,5X,'NX',23X,I7,19X,I7,/,5X,'NY',23X,I7,19X,
     3           I7,/,5X,'LOWER LEFT LATITUDE',6X,I7,19X,I7,/,5X,
     4           'LOWER LEFT LONGITUDE',5X,I7,19X,I7,/,5X,
     5           'GRID ORIENTATION',9X,I7,19X,I7,/,5X,
     6           'TRUE MESH LENGTH',9X,I7,19X,I7,/5X,
     7           'LATITUDE AT TRUE MESH',6X,I5,19X,I7) 
          CALL W3TAGE('CHKGRID2')
          STOP 975
C
      ELSEIF(LTAG.EQ.5) THEN
C
         WRITE(KFILDO,977) KGDS_1,JMAP,KGDS_8,JDX,KGDS_12,JXLAT 
 977     FORMAT(/,26X,'VALUES IN GRIB FILE',5X,
     1          'VALUES IN GRID LIST FILE',//,5X,'MAP PROJECTION',16X,
     2          I2,24X,I2,/,5X,'LATITUDINAL MESH LENGTH',2X,I7,19X,I7,
     3          /,5X,'LATITUDE AT TRUE MESH',4X,I7,19X,I7) 
         CALL W3TAGE('CHKGRID2')
         STOP 977
C
      ELSEIF(LTAG.EQ.6) THEN
C
         WRITE(KFILDO,980) KGDS_1,JMAP,KGDS(2),NNXS,KGDS(3),NNYS,
     1                     KGDS_4,JALAT,KGDS_5,JALON,
     2                     KGDS_8,JDX,KGDS_12,JXLAT 
 980     FORMAT(/,26X,'VALUES IN GRIB FILE',5X,
     1          'VALUES IN GRID LIST FILE',//,5X,'MAP PROJECTION',16X,
     2          I2,24X,I2,/,5X,'NX',23X,I7,19X,I7,/,5X,'NY',23X,I7,19X,
     3          I7,/,5X,'LOWER LEFT LATITUDE',6X,I7,19X,I7,/,5X,
     4          'LOWER LEFT LONGITUDE',5X,I7,19X,I7,/,5X,
     5          'TRUE MESH LENGTH',9X,I7,19X,I7,/,5X,
     6          'LATITUDINAL TRUE MESH',4X,I7,19X,I7) 
         CALL W3TAGE('CHKGRID2')
         STOP 980 
C 
      ENDIF
C
 985  RETURN
      END
c---------------------------- routines extracted from hysplit.v7.4.4

!*  GENERAL CONFORMAL MAP ROUTINES FOR METEOROLOGICAL MODELERS
!*  WRITTEN ON 3/31/94 BY

!* Dr. Albion Taylor
!* NOAA / OAR / ARL                  Phone: (301) 713-0295 x 132
!* Rm. 3151, 1315 East-West Highway  Fax:   (301) 713-0119
!* Silver Spring, MD 20910           E-mail: ADTaylor@arlrisc.ssmc.noaa.gov

!*  SUBROUTINE STLMBR (STRCMP, TNGLAT, CLONG)
!*    THIS ROUTINE INITIALIZES THE MAP STRUCTURE ARRAY STRCMP TO
!*    THE FORM OF A SPECIFIC MAP PROJECTION
!*  INPUTS:
!*    TNGLAT - THE LATITUDE AT WHICH THE PROJECTION WILL BE TANGENT
!*             TO THE EARTH.  +90. FOR NORTH POLAR STEREOGRAPHIC,
!*             -90. FOR SOUTH POLAR STEREOGRAPHIC, 0. FOR MERCATOR,
!*             AND OTHER VALUES FOR LAMBERT CONFORMAL.
!*             -90 <= TNGLAT <= 90.
!*    CLONG -  A LONGITUDE IN THE REGION UNDER CONSIDERATION.  LONGITUDES
!*             BETWEEN CLONG-180. AND CLONG+180.  WILL BE MAPPED IN ONE
!*             CONNECTED REGION
!*  OUTPUTS:
!*    STRCMP - A 9-VALUE MAP STRUCTURE ARRAY FOR USE WITH SUBSEQUENT
!*             CALLS TO THE COORDINATE TRANSFORM ROUTINES.
!*
!*  REAL FUNCTION EQVLAT (XLAT1,XLAT2)
!*    THIS FUNCTION IS PROVIDED TO ASSIST IN FINDING THE TANGENT LATITUDE
!*    EQUIVALENT TO THE 2-REFERENCE LATITUDE SPECIFICATION IN THE LEGEND
!*    OF MOST LAMBERT CONFORMAL MAPS.  IF THE MAP SPECIFIES "SCALE
!*    1:XXXXX TRUE AT 40N AND 60N", THEN EQVLAT(40.,60.) WILL RETURN THE
!*    EQUIVALENT TANGENT LATITUDE.
!*  INPUTS:
!*    XLAT1,XLAT2:  THE TWO LATITUDES SPECIFIED IN THE MAP LEGEND
!*  RETURNS:
!*    THE EQUIVALENT TANGENT LATITUDE
!*  EXAMPLE:  CALL STLMBR(STRCMP, EQVLAT(40.,60.), 90.)

!*  SUBROUTINE STCM2P (STRCMP, X1,Y1, XLAT1,XLONG1,
!*          X2,Y2, XLAT2,XLONG2)
!*  SUBROUTINE STCM1P (STRCMP, X1,Y1, XLAT1,XLONG1,
!*          XLATG,XLONGG, GRIDSZ, ORIENT)
!*    THESE ROUTINES COMPLETE THE SPECIFICATION OF THE MAP STRUCTURE
!*    ARRAY BY CONFORMING THE MAP COORDINATES TO THE SPECIFICATIONS
!*    OF A PARTICULAR GRID.  EITHER STCM1P OR STCM2P MUST BE CALLED,
!*    BUT NOT BOTH
!*  INPUTS:
!*    STRCMP - A 9-VALUE MAP STRUCTURE ARRAY, SET TO A PARTICULAR MAP
!*             FORM BY A PREVIOUS CALL TO STLMBR
!*    FOR STCM2P:
!*      X1,Y1, X2,Y2 - THE MAP COORDINATES OF TWO POINTS ON THE GRID
!*      XLAT1,XLONG1, XLAT2,XLONG2 - THE GEOGRAPHIC COORDINATES OF THE
!*             SAME TWO POINTS
!*    FOR STCM1P:
!*      X1,Y1 - THE MAP COORDINATES OF ONE POINT ON THE GRID
!*      XLAT1,XLONG1 - THE GEOGRAPHIC COORDINATES OF THE SAME POINT
!*      XLATG,XLONGG - LATITUDE AND LONGITUDE OF REFERENCE POINT FOR
!*             GRIDSZ AND ORIENTATION SPECIFICATION.
!*      GRIDSZ - THE DESIRED GRID SIZE IN KILOMETERS, AT XLATG,XLONGG
!*      ORIENT - THE ANGLE, WITH RESPECT TO NORTH, OF A Y-GRID LINE, AT
!*             THE POINT XLATG,XLONGG
!*  OUTPUTS:
!*    STRCMP - A 9-VALUE MAP STRUCTURE ARRAY, FULLY SET FOR USE BY
!*             OTHER SUBROUTINES IN THIS SYSTEM

!*  SUBROUTINE CLL2XY (STRCMP, XLAT,XLONG, X,Y)
!*  SUBROUTINE CXY2LL (STRCMP, X,Y, XLAT,XLONG)
!*     THESE ROUTINES CONVERT BETWEEN MAP COORDINATES X,Y
!*     AND GEOGRAPHIC COORDINATES XLAT,XLONG
!*  INPUTS:
!*     STRCMP(9) - 9-VALUE MAP STRUCTURE ARRAY
!*     FOR CLL2XY:  XLAT,XLONG - GEOGRAPHIC COORDINATES
!*     FOR CXY2LL:  X,Y - MAP COORDINATES
!*  OUTPUTS:
!*     FOR CLL2XY:  X,Y - MAP COORDINATES
!*     FOR CXY2LL:  XLAT,XLONG - GEOGRAPHIC COORDINATES

!*  SUBROUTINE CC2GXY (STRCMP, X,Y, UE,VN, UG,VG)
!*  SUBROUTINE CG2CXY (STRCMP, X,Y, UG,VG, UE,VN)
!*  SUBROUTINE CC2GLL (STRCMP, XLAT,XLONG, UE,VN, UG,VG)
!*  SUBROUTINE CG2CLL (STRCMP, XLAT,XLONG, UG,VG, UE,VN)
!*     THESE SUBROUTINES CONVERT VECTOR WIND COMPONENTS FROM
!*     GEOGRAPHIC, OR COMPASS, COORDINATES, TO MAP OR
!*     GRID COORDINATES.  THE SITE OF THE WIND TO BE
!*     CONVERTED MAY BE GIVEN EITHER IN GEOGRAPHIC OR
!*     MAP COORDINATES.  WIND COMPONENTS ARE ALL IN KILOMETERS
!*     PER HOUR, WHETHER GEOGRAPHIC OR MAP COORDINATES.
!*  INPUTS:
!*    STRCMP(9) - 9-VALUE MAP STRUCTURE ARRAY
!*    FOR CC2GXY AND CG2CXY:  X,Y        -  MAP COORDINATES OF SITE
!*    FOR CC2GLL AND CG2CLL:  XLAT,XLONG -  GEOGRAPHIC COORDINATES OF SITE
!*    FOR CC2GXY AND CC2GLL:  UE,VN - EAST AND NORTH WIND COMPONENTS
!*    FOR CG2CXY AND CG2CLL:  UG,VG - X- AND Y- DIRECTION WIND COMPONENTS
!*  OUTPUTS:
!*    FOR CC2GXY AND CC2GLL:  UG,VG - X- AND Y- DIRECTION WIND COMPONENTS
!*    FOR CG2CXY AND CG2CLL:  UE,VN - EAST AND NORTH WIND COMPONENTS
!*  3/9/99 CHANGES MADE IN THE C C2G AND G2C ROUTINES TO ALLOW UG,VG AND UE,VN T
!* SHARE THE SAME STORAGE BEFORE AND AFTER BEING CALLED

!*  SUBROUTINE CCRVXY (STRCMP, X, Y,       GX,GY)
!*  SUBROUTINE CCRVLL (STRCMP, XLAT,XLONG, GX,GY)
!*    THESE SUBROUTINES RETURN THE CURVATURE VECTOR (GX,GY), AS REFERENCED
!*    TO MAP COORDINATES, INDUCED BY THE MAP TRANSFORMATION.  WHEN
!*    NON-LINEAR TERMS IN WIND SPEED ARE IMPORTANT, A "GEODESIC" FORCE
!*    SHOULD BE INCLUDED IN THE VECTOR FORM [ (U,U) G - (U,G) U ] WHERE THE
!*    INNER PRODUCT (U,G) IS DEFINED AS UX*GX + UY*GY.
!*  INPUTS:
!*    STRCMP(9) - 9-VALUE MAP STRUCTURE ARRAY
!*    FOR CCRVXY:  X,Y        -  MAP COORDINATES OF SITE
!*    FOR CCRVLL:  XLAT,XLONG -  GEOGRAPHIC COORDINATES OF SITE
!*  OUTPUTS:
!*    GX,GY       - VECTOR COEFFICIENTS OF CURVATURE, IN UNITS RADIANS
!*                  PER KILOMETER

!*  REAL FUNCTION CGSZLL (STRCMP, XLAT,XLONG)
!*  REAL FUNCTION CGSZXY (STRCMP, X,Y)
!*    THESE FUNCTIONS RETURN THE SIZE, IN KILOMETERS, OF EACH UNIT OF
!*    MOTION IN MAP COORDINATES (GRID SIZE).  THE GRID SIZE AT ANY
!*    LOCATION DEPENDS ON THAT LOCATION; THE POSITION MAY BE GIVEN IN
!*    EITHER MAP OR GEOGRAPHIC COORDINATES.
!*  INPUTS:
!*    STRCMP(9) - 9-VALUE MAP STRUCTURE ARRAY
!*    FOR CGSZXY:  X,Y        -  MAP COORDINATES OF SITE
!*    FOR CGSZLL:  XLAT,XLONG -  GEOGRAPHIC COORDINATES OF SITE
!*  RETURNS:
!*    GRIDSIZE IN KILOMETERS AT GIVEN SITE.

!*  SUBROUTINE CPOLXY (STRCMP, X,Y, ENX,ENY,ENZ)
!*  SUBROUTINE CPOLLL (STRCMP, XLAT,XLONG, ENX,ENY,ENZ)
!*    THESE SUBROUTINES PROVIDE 3-D VECTOR COMPONENTS OF A UNIT VECTOR
!*    IN THE DIRECTION OF THE NORTH POLAR AXIS.  WHEN MULTIPLIED
!*    BY TWICE THE ROTATION RATE OF THE EARTH (2 * PI/24 HR), THE
!*    VERTICAL COMPONENT YIELDS THE CORIOLIS FACTOR.
!*  INPUTS:
!*    STRCMP(9) - 9-VALUE MAP STRUCTURE ARRAY
!*    FOR CPOLXY:  X,Y        -  MAP COORDINATES OF SITE
!*    FOR CPOLLL:  XLAT,XLONG -  GEOGRAPHIC COORDINATES OF SITE
!*  RETURNS:
!*    ENX,ENY,ENZ THE DIRECTION COSINES OF A UNIT VECTOR IN THE
!*    DIRECTION OF THE ROTATION AXIS OF THE EARTH

!*  SUBROUTINE CNLLXY (STRCMP, XLAT,XLONG, XI,ETA)
!*  SUBROUTINE CNXYLL (STRCMP, XI,ETA, XLAT,XLONG)
!*    THESE SUBROUTINES PERFORM THE UNDERLYING TRANSFORMATIONS FROM
!*    GEOGRAPHIC COORDINATES TO AND FROM CANONICAL (EQUATOR CENTERED)
!*    COORDINATES.  THEY ARE CALLED BY CXY2LL AND CLL2XY, BUT ARE NOT
!*    INTENDED TO BE CALLED DIRECTLY

!*  REAL FUNCTION CSPANF (VALUE, BEGIN, END)
!*    THIS FUNCTION ASSISTS OTHER ROUTINES IN PROVIDING A LONGITUDE IN
!*    THE PROPER RANGE.  IT ADDS TO VALUE WHATEVER MULTIPLE OF
!*    (END - BEGIN) IS NEEDED TO RETURN A NUMBER BEGIN < CSPANF <= END

c---------------------------------------------------------------------

      REAL FUNCTION CGSZLL (STRCMP, XLAT,XLONG)
!*  WRITTEN ON 3/31/94 BY Dr. Albion Taylor  NOAA / OAR / ARL
      PARAMETER (PI=3.14159265358979,RADPDG=PI/180,DGPRAD=180D0/PI)
      REAL STRCMP(9)
      DOUBLE PRECISION SLAT,YMERC,EFACT
      IF (XLAT .GT. 89.995) THEN
!* CLOSE TO NORTH POLE
        IF (STRCMP(1) .GT. 0.9999) THEN
!* AND TO GAMMA == 1.
          CGSZLL = 2. * STRCMP(7)
          RETURN
        ENDIF
        EFACT = COS(RADPDG * XLAT)
        IF (EFACT .LE. 0.) THEN
          CGSZLL = 0.
          RETURN
        ELSE
          YMERC = - LOG( EFACT /(1. + SIN(RADPDG * XLAT)))
        ENDIF
      ELSE IF (XLAT .LT. -89.995) THEN
!* CLOSE TO SOUTH POLE
        IF (STRCMP(1) .LT. -0.9999) THEN
!* AND TO GAMMA == -1.0
          CGSZLL = 2. * STRCMP(7)
          RETURN
        ENDIF
        EFACT = COS(RADPDG * XLAT)
        IF (EFACT .LE. 0.) THEN
          CGSZLL = 0.
          RETURN
        ELSE
          YMERC = LOG( EFACT /(1. - SIN(RADPDG * XLAT)))
        ENDIF
      ELSE
      SLAT = SIN(RADPDG * XLAT)
      YMERC = LOG((1. + SLAT) / (1. - SLAT))/2.
!      EFACT = EXP(YMERC)
!      CGSZLL = 2. * STRCMP(7) * EXP (STRCMP(1) * YMERC)
!     C                   / (EFACT + 1./EFACT)
      ENDIF
      CGSZLL = STRCMP(7) * COS(RADPDG * XLAT) * EXP(STRCMP(1) *YMERC)
      RETURN
      END
c---------------------------------------------------------------------
	SUBROUTINE CLL2XY (STCPRM, XLAT,XLONG, X,Y)
!*  WRITTEN ON 3/31/94 BY Dr. Albion Taylor  NOAA / OAR / ARL
      PARAMETER (REARTH=6371.2)
      REAL STCPRM(9)
      CALL CNLLXY(STCPRM, XLAT,XLONG, XI,ETA)
      X = STCPRM(3) + REARTH/STCPRM(7) *                                       
     >              (XI * STCPRM(5) + ETA * STCPRM(6) )
      Y = STCPRM(4) + REARTH/STCPRM(7) *                                       
     >              (ETA * STCPRM(5) - XI * STCPRM(6) )
      RETURN
      END
c---------------------------------------------------------------------

      SUBROUTINE CNLLXY (STRCMP, XLAT,XLONG, XI,ETA)
!*  WRITTEN ON 3/31/94 BY Dr. Albion Taylor  NOAA / OAR / ARL
!  MAIN TRANSFORMATION ROUTINE FROM LATITUDE-LONGITUDE TO
!  CANONICAL (EQUATOR-CENTERED, RADIAN UNIT) COORDINATES
      PARAMETER (PI=3.14159265358979,RADPDG=PI/180,DGPRAD=180/PI)
      PARAMETER (ALMST1=.99999)
      REAL STRCMP(9)
       DOUBLE PRECISION GAMMA
      DOUBLE PRECISION DLONG,DLAT,SLAT,MERCY,GMERCY
      GAMMA = STRCMP(1)
      DLAT = XLAT
      DLONG = CSPANF(XLONG - STRCMP(2), -180., 180.)
      DLONG = DLONG * RADPDG
      GDLONG = GAMMA * DLONG
      IF (ABS(GDLONG) .LT. .01) THEN
!  CODE FOR GAMMA SMALL OR ZERO.  THIS AVOIDS ROUND-OFF ERROR OR DIVIDE-
!  BY ZERO IN THE CASE OF MERCATOR OR NEAR-MERCATOR PROJECTIONS.
        GDLONG = GDLONG * GDLONG
        SNDGAM = DLONG * (1. - 1./6. * GDLONG *                                
     >                      (1. - 1./20. * GDLONG *                            
     >                      (1. - 1./42. * GDLONG )))
        CSDGAM = DLONG * DLONG * .5 *                                          
     >                      (1. - 1./12. * GDLONG *                            
     >                      (1. - 1./30. * GDLONG *                            
     >                      (1. - 1./56. * GDLONG )))
      ELSE
! CODE FOR MODERATE VALUES OF GAMMA
        SNDGAM = SIN (GDLONG) /GAMMA
        CSDGAM = (1. - COS(GDLONG) )/GAMMA /GAMMA
      ENDIF
      SLAT = SIN(RADPDG * DLAT)
      IF ((SLAT .GE. ALMST1) .OR. (SLAT .LE. -ALMST1)) THEN
        ETA = 1./STRCMP(1)
        XI = 0.
        RETURN
      ENDIF
      MERCY = .5 * LOG( (1. + SLAT) / (1. - SLAT) )
      GMERCY = GAMMA * MERCY
      IF (ABS(GMERCY) .LT. .001) THEN
!  CODE FOR GAMMA SMALL OR ZERO.  THIS AVOIDS ROUND-OFF ERROR OR DIVIDE-
!  BY ZERO IN THE CASE OF MERCATOR OR NEAR-MERCATOR PROJECTIONS.
        RHOG1 = MERCY * (1. - .5 * GMERCY *                                    
     >                     (1. - 1./3. * GMERCY *                               
     >                     (1. - 1./4. * GMERCY ) ) )
      ELSE
! CODE FOR MODERATE VALUES OF GAMMA
        RHOG1 = (1. - EXP(-GMERCY)) / GAMMA
      ENDIF
      ETA = RHOG1 + (1. - GAMMA * RHOG1) * GAMMA * CSDGAM
      XI = (1. - GAMMA * RHOG1 ) * SNDGAM
      END
c---------------------------------------------------------------------
      REAL FUNCTION CSPANF (VALUE, BEGIN, END)
!*  WRITTEN ON 3/31/94 BY Dr. Albion Taylor  NOAA / OAR / ARL
!* REAL FUNCTION CSPANF RETURNS A VALUE IN THE INTERVAL (BEGIN,END]
!* WHICH IS EQUIVALENT TO VALUE, MOD (END - BEGIN).  IT IS USED TO
!* REDUCE PERIODIC VARIABLES TO A STANDARD RANGE.  IT ADJUSTS FOR THE
!* BEHAVIOR OF THE MOD FUNCTION WHICH PROVIDES POSITIVE RESULTS FOR
!* POSITIVE INPUT, AND NEGATIVE RESULTS FOR NEGATIVE INPUT
!* INPUT:
!*       VALUE - REAL NUMBER TO BE REDUCED TO THE SPAN
!*       BEGIN - FIRST VALUE OF THE SPAN
!*       END   - LAST VALUE OF THE SPAN
!* RETURNS:
!*       THE REDUCED VALUE
!* EXAMPLES:
!*      ALONG = CSPANF(XLONG, -180., +180.)
!*      DIR  = CSPANF(ANGLE, 0., 360.)
      REAL FIRST,LAST
      FIRST = MIN(BEGIN,END)
      LAST = MAX(BEGIN,END)
      VAL = MOD( VALUE - FIRST , LAST - FIRST)
      IF (VAL.LE.0.) THEN
        CSPANF = VAL + LAST
      ELSE
        CSPANF = VAL + FIRST
      ENDIF
      RETURN
      END
c---------------------------------------------------------------------

      REAL FUNCTION EQVLAT (XLAT1,XLAT2)
!*  WRITTEN ON 3/31/94 BY Dr. Albion Taylor  NOAA / OAR / ARL
      PARAMETER (PI=3.14159265358979,RADPDG=PI/180,DGPRAD=180/PI)
      SIND(X) = SIN (RADPDG*X)
      SINL1 = SIND (XLAT1)
      SINL2 = SIND (XLAT2)
      IF (ABS(SINL1 - SINL2) .GT. .001) THEN
        AL1 = LOG((1. - SINL1)/(1. - SINL2))
        AL2 = LOG((1. + SINL1)/(1. + SINL2))
      ELSE
!  CASE LAT1 NEAR OR EQUAL TO LAT2
        TAU = - (SINL1 - SINL2)/(2. - SINL1 - SINL2)
        TAU = TAU*TAU
        AL1  = 2. / (2. - SINL1 - SINL2) * (1.    + TAU *                      
     >                                     (1./3. + TAU *                       
     >                                    (1./5. + TAU *                        
     >                                    (1./7.))))
        TAU =   (SINL1 - SINL2)/(2. + SINL1 + SINL2)
        TAU = TAU*TAU
        AL2  = -2. / (2. + SINL1 + SINL2) * (1.    + TAU *                     
     >                                      (1./3. + TAU *                      
     >                                     (1./5. + TAU *                       
     >                                     (1./7.))))
      ENDIF
      EQVLAT = ASIN((AL1 + AL2) / (AL1 - AL2))/RADPDG
      RETURN
      END
c---------------------------------------------------------------------

      SUBROUTINE STCM1P(STRCMP, X1,Y1, XLAT1,XLONG1,                           
     >  XLATG,XLONGG, GRIDSZ, ORIENT)
!*  WRITTEN ON 3/31/94 BY Dr. Albion Taylor  NOAA / OAR / ARL
      PARAMETER (PI=3.14159265358979,RADPDG=PI/180,DGPRAD=180/PI)
      REAL STRCMP(9)
      DO K=3,4
        STRCMP (K) = 0.
      ENDDO
        TURN = RADPDG * (ORIENT - STRCMP(1) *                                  
     >             CSPANF(XLONGG - STRCMP(2), -180., 180.) )
      STRCMP (5) = COS (TURN)
      STRCMP (6) = - SIN (TURN)
      STRCMP (7) = 1.
      STRCMP (7) = GRIDSZ * STRCMP(7)                                          
     >              / CGSZLL(STRCMP, XLATG, STRCMP(2))
      CALL CLL2XY (STRCMP, XLAT1,XLONG1, X1A,Y1A)
      STRCMP(3) = STRCMP(3) + X1 - X1A
      STRCMP(4) = STRCMP(4) + Y1 - Y1A
      RETURN
      END

c---------------------------------------------------------------------

      SUBROUTINE STLMBR(STRCMP, TNGLAT, XLONG)
!*  WRITTEN ON 3/31/94 BY Dr. Albion Taylor  NOAA / OAR / ARL
      PARAMETER (PI=3.14159265358979,RADPDG=PI/180,DGPRAD=180/PI)
      PARAMETER (REARTH=6371.2)
      REAL STRCMP(9)
      STRCMP(1) = SIN(RADPDG * TNGLAT)
!*  GAMMA = SINE OF THE TANGENT LATITUDE
      STRCMP(2) = CSPANF( XLONG, -180., +180.)
!* LAMBDA_0 = REFERENCE LONGITUDE
      STRCMP(3) = 0.
!* X_0 = X- GRID COORDINATE OF ORIGIN (XI,ETA) = (0.,0.)
      STRCMP(4) = 0.
!* y_0 = Y-GRID COORDINATE OF ORIGIN (XI,ETA) = (0.,0.) 
      STRCMP(5) = 1.
!* COSINE OF ROTATION ANGLE FROM XI,ETA TO X,Y
      STRCMP(6) = 0.
!* SINE OF ROTATION ANGLE FROM XI,ETA TO X,Y
      STRCMP(7) = REARTH
!* GRIDSIZE IN KILOMETERS AT THE EQUATOR
      CALL CNLLXY(STRCMP, 89.,XLONG, XI,ETA)
      STRCMP(8) = 2. * ETA - STRCMP(1) * ETA * ETA
!* RADIAL COORDINATE FOR 1 DEGREE FROM NORTH POLE
      CALL CNLLXY(STRCMP, -89.,XLONG, XI,ETA)
         STRCMP(9) = 2. * ETA - STRCMP(1) * ETA * ETA
!* RADIAL COORDINATE FOR 1 DEGREE FROM SOUTH POLE
      RETURN
      END
c---------------------------------------------------------------------
